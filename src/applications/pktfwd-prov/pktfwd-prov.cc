/* A RapidNet application. Generated by RapidNet compiler. */

#include "pktfwd-prov.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::pktfwdprov;

const string PktfwdProv::BESTPATH = "bestPath";
const string PktfwdProv::EPRETURN = "ePReturn";
const string PktfwdProv::EPROVQUERY = "eProvQuery";
const string PktfwdProv::ERRETURN = "eRReturn";
const string PktfwdProv::ERULEQUERY = "eRuleQuery";
const string PktfwdProv::ESEND = "eSend";
const string PktfwdProv::ESENDDELETE = "eSendDelete";
const string PktfwdProv::EBESTPATH = "ebestPath";
const string PktfwdProv::EBESTPATHDELETE = "ebestPathDelete";
const string PktfwdProv::EBESTPATHTEMP = "ebestPathTemp";
const string PktfwdProv::EBESTPATHTEMPDELETE = "ebestPathTempDelete";
const string PktfwdProv::EESEND = "eeSend";
const string PktfwdProv::EESENDDELETE = "eeSendDelete";
const string PktfwdProv::EESENDTEMP = "eeSendTemp";
const string PktfwdProv::EESENDTEMPDELETE = "eeSendTempDelete";
const string PktfwdProv::EINIT = "einit";
const string PktfwdProv::EINITTEMP = "einitTemp";
const string PktfwdProv::EPACKET = "epacket";
const string PktfwdProv::EPACKETDELETE = "epacketDelete";
const string PktfwdProv::EPACKETTEMP = "epacketTemp";
const string PktfwdProv::EPACKETTEMPDELETE = "epacketTempDelete";
const string PktfwdProv::EPATH = "epath";
const string PktfwdProv::EPATHDELETE = "epathDelete";
const string PktfwdProv::EPATHTEMP = "epathTemp";
const string PktfwdProv::EPATHTEMPDELETE = "epathTempDelete";
const string PktfwdProv::INIT = "init";
const string PktfwdProv::INITDELETE = "initDelete";
const string PktfwdProv::LINK = "link";
const string PktfwdProv::PITERATE = "pIterate";
const string PktfwdProv::PQLIST = "pQList";
const string PktfwdProv::PRESULTTMP = "pResultTmp";
const string PktfwdProv::PRETURN = "pReturn";
const string PktfwdProv::PACKET = "packet";
const string PktfwdProv::PACKETDELETE = "packetDelete";
const string PktfwdProv::PATH = "path";
const string PktfwdProv::PERIODIC = "periodic";
const string PktfwdProv::PROV = "prov";
const string PktfwdProv::PROVQUERY = "provQuery";
const string PktfwdProv::PROV_I0_1_ECAPERIODIC = "prov_i0_1_ecaperiodic";
const string PktfwdProv::RITERATE = "rIterate";
const string PktfwdProv::RQLIST = "rQList";
const string PktfwdProv::RRESULTTMP = "rResultTmp";
const string PktfwdProv::RRETURN = "rReturn";
const string PktfwdProv::RULEEXEC = "ruleExec";
const string PktfwdProv::RULEQUERY = "ruleQuery";
const string PktfwdProv::STATUS = "status";
const string PktfwdProv::TABLE = "table";

NS_LOG_COMPONENT_DEFINE("PktfwdProv");
NS_OBJECT_ENSURE_REGISTERED(PktfwdProv);

TypeId
PktfwdProv::GetTypeId(void)
{
  static TypeId tid = TypeId("ns3::rapidnet::pktfwdprov::PktfwdProv")
                          .SetParent<RapidNetApplicationBase>()
                          .AddConstructor<PktfwdProv>();
  return tid;
}

PktfwdProv::PktfwdProv()
{
  NS_LOG_FUNCTION_NOARGS();
}

PktfwdProv::~PktfwdProv()
{
  NS_LOG_FUNCTION_NOARGS();
}

void PktfwdProv::DoDispose(void)
{
  NS_LOG_FUNCTION_NOARGS();

  RapidNetApplicationBase::DoDispose();
}

void PktfwdProv::StartApplication(void)
{
  NS_LOG_FUNCTION_NOARGS();

  RapidNetApplicationBase::StartApplication();
  m_event_prov_i0_1_ecaperiodic =
      Simulator::Schedule(Seconds(0), &PktfwdProv::Prov_i0_1_ecaperiodic, this);
  m_count_prov_i0_1_ecaperiodic = 0;
  RAPIDNET_LOG_INFO("PktfwdProv Application Started");
}

void PktfwdProv::StopApplication()
{
  NS_LOG_FUNCTION_NOARGS();

  RapidNetApplicationBase::StopApplication();
  Simulator::Cancel(m_event_prov_i0_1_ecaperiodic);
  RAPIDNET_LOG_INFO("PktfwdProv Application Stopped");
}

void PktfwdProv::InitDatabase()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys(BESTPATH, attrdeflist(
                                    attrdef("bestPath_attr1", IPV4),
                                    attrdef("bestPath_attr2", IPV4)));

  AddRelationWithKeys(LINK, attrdeflist(
                                attrdef("link_attr1", IPV4),
                                attrdef("link_attr2", IPV4)));

  AddRelationWithKeys(PQLIST, attrdeflist(
                                  attrdef("pQList_attr1", IPV4),
                                  attrdef("pQList_attr2", ID)));

  AddRelationWithKeys(PRESULTTMP, attrdeflist(
                                      attrdef("pResultTmp_attr1", IPV4),
                                      attrdef("pResultTmp_attr2", ID)));

  AddRelationWithKeys(PATH, attrdeflist(
                                attrdef("path_attr4", LIST)));

  AddRelationWithKeys(PROV, attrdeflist(
                                attrdef("prov_attr1", IPV4),
                                attrdef("prov_attr2", ID),
                                attrdef("prov_attr3", ID)));

  AddRelationWithKeys(RQLIST, attrdeflist(
                                  attrdef("rQList_attr1", IPV4),
                                  attrdef("rQList_attr2", ID)));

  AddRelationWithKeys(RRESULTTMP, attrdeflist(
                                      attrdef("rResultTmp_attr1", IPV4),
                                      attrdef("rResultTmp_attr2", ID)));

  AddRelationWithKeys(RULEEXEC, attrdeflist(
                                    attrdef("ruleExec_attr1", IPV4),
                                    attrdef("ruleExec_attr2", ID)));

  AddRelationWithKeys(STATUS, attrdeflist(
                                  attrdef("status_attr1", IPV4)));

  AddRelationWithKeys(TABLE, attrdeflist(
                                 attrdef("table_attr1", IPV4),
                                 attrdef("table_attr2", INT32)));

  m_aggr_bestpathMinC = AggrMin::New(BESTPATH,
                                     this,
                                     attrdeflist(
                                         attrdeftype("bestPath_attr1", ANYTYPE),
                                         attrdeftype("bestPath_attr2", ANYTYPE),
                                         attrdeftype("bestPath_attr3", ANYTYPE),
                                         attrdeftype("bestPath_attr4", ANYTYPE),
                                         attrdeftype("bestPath_attr5", ANYTYPE)),
                                     3);
}

void PktfwdProv::DemuxRecv(Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv(tuple);

  if (IsInsertEvent(tuple, LINK))
  {
    Prov_p1_1Eca0Ins(tuple);
  }
  if (IsDeleteEvent(tuple, LINK))
  {
    Prov_p1_1Eca0Del(tuple);
  }
  if (IsRecvEvent(tuple, EPATHTEMP))
  {
    Prov_p1_2_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, EPATHTEMPDELETE))
  {
    Prov_p1_2_ecaDel(tuple);
  }
  if (IsRecvEvent(tuple, EPATHTEMP))
  {
    Prov_p1_3_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, EPATHTEMPDELETE))
  {
    Prov_p1_3_ecaDel(tuple);
  }
  if (IsRecvEvent(tuple, EPATH))
  {
    Prov_p1_4_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, EPATHDELETE))
  {
    Prov_p1_4_ecaDel(tuple);
  }
  if (IsRecvEvent(tuple, EPATH))
  {
    Prov_p1_5_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, EPATHDELETE))
  {
    Prov_p1_5_ecaDel(tuple);
  }
  if (IsInsertEvent(tuple, LINK))
  {
    Prov_p2_1Eca0Ins(tuple);
  }
  if (IsDeleteEvent(tuple, LINK))
  {
    Prov_p2_1Eca0Del(tuple);
  }
  if (IsInsertEvent(tuple, BESTPATH))
  {
    Prov_p2_1Eca3Ins(tuple);
  }
  if (IsDeleteEvent(tuple, BESTPATH))
  {
    Prov_p2_1Eca3Del(tuple);
  }
  if (IsInsertEvent(tuple, BESTPATH))
  {
    Prov_p3_1Eca0Ins(tuple);
  }
  if (IsDeleteEvent(tuple, BESTPATH))
  {
    Prov_p3_1Eca0Del(tuple);
  }
  if (IsRecvEvent(tuple, EBESTPATHTEMP))
  {
    Prov_p3_2_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, EBESTPATHTEMPDELETE))
  {
    Prov_p3_2_ecaDel(tuple);
  }
  if (IsRecvEvent(tuple, EBESTPATHTEMP))
  {
    Prov_p3_3_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, EBESTPATHTEMPDELETE))
  {
    Prov_p3_3_ecaDel(tuple);
  }
  if (IsInsertEvent(tuple, PATH))
  {
    P3eca(tuple);
  }
  if (IsDeleteEvent(tuple, PATH))
  {
    P3eca2(tuple);
  }
  if (IsRecvEvent(tuple, EBESTPATH))
  {
    Prov_p3_5_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, EBESTPATHDELETE))
  {
    Prov_p3_5_ecaDel(tuple);
  }
  if (IsRecvEvent(tuple, PROV_I0_1_ECAPERIODIC))
  {
    Prov_i0_1_eca(tuple);
  }
  if (IsRecvEvent(tuple, EINITTEMP))
  {
    Prov_i0_2_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, EINITTEMP))
  {
    Prov_i0_3_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, EINIT))
  {
    Prov_i0_4_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, EINIT))
  {
    Prov_i0_5_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, INIT))
  {
    Prov_i1_1_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, INITDELETE))
  {
    Prov_i1_1_ecaDel(tuple);
  }
  if (IsRecvEvent(tuple, EESENDTEMP))
  {
    Prov_i1_2_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, EESENDTEMPDELETE))
  {
    Prov_i1_2_ecaDel(tuple);
  }
  if (IsRecvEvent(tuple, EESENDTEMP))
  {
    Prov_i1_3_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, EESENDTEMPDELETE))
  {
    Prov_i1_3_ecaDel(tuple);
  }
  if (IsRecvEvent(tuple, EESEND))
  {
    Prov_i1_4_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, EESENDDELETE))
  {
    Prov_i1_4_ecaDel(tuple);
  }
  if (IsRecvEvent(tuple, EESEND))
  {
    Prov_i1_5_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, EESENDDELETE))
  {
    Prov_i1_5_ecaDel(tuple);
  }
  if (IsRecvEvent(tuple, ESEND))
  {
    Prov_r0_1_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, ESENDDELETE))
  {
    Prov_r0_1_ecaDel(tuple);
  }
  if (IsRecvEvent(tuple, EPACKETTEMP))
  {
    Prov_r0_2_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, EPACKETTEMPDELETE))
  {
    Prov_r0_2_ecaDel(tuple);
  }
  if (IsRecvEvent(tuple, EPACKETTEMP))
  {
    Prov_r0_3_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, EPACKETTEMPDELETE))
  {
    Prov_r0_3_ecaDel(tuple);
  }
  if (IsRecvEvent(tuple, EPACKET))
  {
    Prov_r0_4_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, EPACKETDELETE))
  {
    Prov_r0_4_ecaDel(tuple);
  }
  if (IsRecvEvent(tuple, EPACKET))
  {
    Prov_r0_5_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, EPACKETDELETE))
  {
    Prov_r0_5_ecaDel(tuple);
  }
  if (IsRecvEvent(tuple, PACKET))
  {
    Prov_r1_1_ecaAdd(tuple);
  }
  if (IsRecvEvent(tuple, PACKETDELETE))
  {
    Prov_r1_1_ecaDel(tuple);
  }
  if (IsInsertEvent(tuple, LINK))
  {
    Prov_edb_1Eca1Ins(tuple);
  }
  if (IsDeleteEvent(tuple, LINK))
  {
    Prov_edb_1Eca1Del(tuple);
  }
  if (IsInsertEvent(tuple, STATUS))
  {
    Prov_edb_2Eca1Ins(tuple);
  }
  if (IsDeleteEvent(tuple, STATUS))
  {
    Prov_edb_2Eca1Del(tuple);
  }
  if (IsInsertEvent(tuple, TABLE))
  {
    Prov_edb_3Eca1Ins(tuple);
  }
  if (IsDeleteEvent(tuple, TABLE))
  {
    Prov_edb_3Eca1Del(tuple);
  }
  if (IsRecvEvent(tuple, PROVQUERY))
  {
    Edb1_eca(tuple);
  }
  if (IsRecvEvent(tuple, PROVQUERY))
  {
    Idb1_eca(tuple);
  }
  if (IsRecvEvent(tuple, PROVQUERY))
  {
    Idb2_eca(tuple);
  }
  if (IsRecvEvent(tuple, PROVQUERY))
  {
    Idb3_eca(tuple);
  }
  if (IsRecvEvent(tuple, PITERATE))
  {
    Idb4_eca(tuple);
  }
  if (IsRecvEvent(tuple, PITERATE))
  {
    Idb5_eca(tuple);
  }
  if (IsRecvEvent(tuple, ERULEQUERY))
  {
    Idb6_eca(tuple);
  }
  if (IsRecvEvent(tuple, RRETURN))
  {
    Idb7_eca(tuple);
  }
  if (IsInsertEvent(tuple, PRESULTTMP))
  {
    Idb8Eca0Ins(tuple);
  }
  if (IsInsertEvent(tuple, PQLIST))
  {
    Idb8Eca1Ins(tuple);
  }
  if (IsRecvEvent(tuple, EPRETURN))
  {
    Idb9_eca(tuple);
  }
  if (IsRecvEvent(tuple, RULEQUERY))
  {
    Rv1_eca(tuple);
  }
  if (IsRecvEvent(tuple, RULEQUERY))
  {
    Rv2_eca(tuple);
  }
  if (IsRecvEvent(tuple, RULEQUERY))
  {
    Rv3_eca(tuple);
  }
  if (IsRecvEvent(tuple, RITERATE))
  {
    Rv4_eca(tuple);
  }
  if (IsRecvEvent(tuple, RITERATE))
  {
    Rv5_eca(tuple);
  }
  if (IsRecvEvent(tuple, EPROVQUERY))
  {
    Rv6_eca(tuple);
  }
  if (IsRecvEvent(tuple, PRETURN))
  {
    Rv7_eca(tuple);
  }
  if (IsInsertEvent(tuple, RRESULTTMP))
  {
    Rv8Eca0Ins(tuple);
  }
  if (IsInsertEvent(tuple, RQLIST))
  {
    Rv8Eca1Ins(tuple);
  }
  if (IsRecvEvent(tuple, ERRETURN))
  {
    Rv9_eca(tuple);
  }
}

void PktfwdProv::Prov_p1_1Eca0Ins(Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO("Prov_p1_1Eca0Ins triggered");

  Ptr<Tuple> result = link;

  result->Assign(Assignor::New("PID1",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                ValueExpr::New(StrValue::New("link")),
                                                                                VarExpr::New("link_attr1")),
                                                                 VarExpr::New("link_attr2")),
                                                  VarExpr::New("link_attr3")))));

  result->Assign(Assignor::New("List",
                               FAppend::New(
                                   VarExpr::New("PID1"))));

  result->Assign(Assignor::New("P1",
                               FAppend::New(
                                   VarExpr::New("link_attr1"))));

  result->Assign(Assignor::New("P2",
                               FAppend::New(
                                   VarExpr::New("link_attr2"))));

  result->Assign(Assignor::New("P",
                               FConcat::New(
                                   VarExpr::New("P1"),
                                   VarExpr::New("P2"))));

  result->Assign(Assignor::New("N",
                               VarExpr::New("link_attr2")));

  result->Assign(Assignor::New("RLOC",
                               VarExpr::New("link_attr1")));

  result->Assign(Assignor::New("RWeight",
                               ValueExpr::New(RealValue::New(1))));

  result->Assign(Assignor::New("R",
                               ValueExpr::New(StrValue::New("p1"))));

  result->Assign(Assignor::New("RID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 VarExpr::New("R"),
                                                                 VarExpr::New("RLOC")),
                                                  VarExpr::New("List")))));

  result = result->Project(
      EPATHTEMP,
      strlist("RLOC",
              "link_attr1",
              "link_attr2",
              "link_attr3",
              "P",
              "N",
              "RID",
              "RWeight",
              "R",
              "List",
              "RLOC"),
      strlist("epathTemp_attr1",
              "epathTemp_attr2",
              "epathTemp_attr3",
              "epathTemp_attr4",
              "epathTemp_attr5",
              "epathTemp_attr6",
              "epathTemp_attr7",
              "epathTemp_attr8",
              "epathTemp_attr9",
              "epathTemp_attr10",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_p1_1Eca0Del(Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO("Prov_p1_1Eca0Del triggered");

  Ptr<Tuple> result = link;

  result->Assign(Assignor::New("PID1",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                ValueExpr::New(StrValue::New("link")),
                                                                                VarExpr::New("link_attr1")),
                                                                 VarExpr::New("link_attr2")),
                                                  VarExpr::New("link_attr3")))));

  result->Assign(Assignor::New("List",
                               FAppend::New(
                                   VarExpr::New("PID1"))));

  result->Assign(Assignor::New("P1",
                               FAppend::New(
                                   VarExpr::New("link_attr1"))));

  result->Assign(Assignor::New("P2",
                               FAppend::New(
                                   VarExpr::New("link_attr2"))));

  result->Assign(Assignor::New("P",
                               FConcat::New(
                                   VarExpr::New("P1"),
                                   VarExpr::New("P2"))));

  result->Assign(Assignor::New("N",
                               VarExpr::New("link_attr2")));

  result->Assign(Assignor::New("RLOC",
                               VarExpr::New("link_attr1")));

  result->Assign(Assignor::New("RWeight",
                               ValueExpr::New(RealValue::New(1))));

  result->Assign(Assignor::New("R",
                               ValueExpr::New(StrValue::New("p1"))));

  result->Assign(Assignor::New("RID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 VarExpr::New("R"),
                                                                 VarExpr::New("RLOC")),
                                                  VarExpr::New("List")))));

  result = result->Project(
      EPATHTEMPDELETE,
      strlist("RLOC",
              "link_attr1",
              "link_attr2",
              "link_attr3",
              "P",
              "N",
              "RID",
              "RWeight",
              "R",
              "List",
              "RLOC"),
      strlist("epathTempDelete_attr1",
              "epathTempDelete_attr2",
              "epathTempDelete_attr3",
              "epathTempDelete_attr4",
              "epathTempDelete_attr5",
              "epathTempDelete_attr6",
              "epathTempDelete_attr7",
              "epathTempDelete_attr8",
              "epathTempDelete_attr9",
              "epathTempDelete_attr10",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_p1_2_ecaAdd(Ptr<Tuple> epathTemp)
{
  RAPIDNET_LOG_INFO("Prov_p1_2_ecaAdd triggered");

  Ptr<Tuple> result = epathTemp;

  result = result->Project(
      RULEEXEC,
      strlist("epathTemp_attr1",
              "epathTemp_attr7",
              "epathTemp_attr8",
              "epathTemp_attr9",
              "epathTemp_attr10"),
      strlist("ruleExec_attr1",
              "ruleExec_attr2",
              "ruleExec_attr3",
              "ruleExec_attr4",
              "ruleExec_attr5"));

  Insert(result);
}

void PktfwdProv::Prov_p1_2_ecaDel(Ptr<Tuple> epathTempDelete)
{
  RAPIDNET_LOG_INFO("Prov_p1_2_ecaDel triggered");

  Ptr<Tuple> result = epathTempDelete;

  result = result->Project(
      RULEEXEC,
      strlist("epathTempDelete_attr1",
              "epathTempDelete_attr7",
              "epathTempDelete_attr8",
              "epathTempDelete_attr9",
              "epathTempDelete_attr10"),
      strlist("ruleExec_attr1",
              "ruleExec_attr2",
              "ruleExec_attr3",
              "ruleExec_attr4",
              "ruleExec_attr5"));

  Delete(result);
}

void PktfwdProv::Prov_p1_3_ecaAdd(Ptr<Tuple> epathTemp)
{
  RAPIDNET_LOG_INFO("Prov_p1_3_ecaAdd triggered");

  Ptr<Tuple> result = epathTemp;

  result = result->Project(
      EPATH,
      strlist("epathTemp_attr2",
              "epathTemp_attr3",
              "epathTemp_attr4",
              "epathTemp_attr5",
              "epathTemp_attr6",
              "epathTemp_attr7",
              "epathTemp_attr8",
              "epathTemp_attr1",
              "epathTemp_attr2"),
      strlist("epath_attr1",
              "epath_attr2",
              "epath_attr3",
              "epath_attr4",
              "epath_attr5",
              "epath_attr6",
              "epath_attr7",
              "epath_attr8",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_p1_3_ecaDel(Ptr<Tuple> epathTempDelete)
{
  RAPIDNET_LOG_INFO("Prov_p1_3_ecaDel triggered");

  Ptr<Tuple> result = epathTempDelete;

  result = result->Project(
      EPATHDELETE,
      strlist("epathTempDelete_attr2",
              "epathTempDelete_attr3",
              "epathTempDelete_attr4",
              "epathTempDelete_attr5",
              "epathTempDelete_attr6",
              "epathTempDelete_attr7",
              "epathTempDelete_attr8",
              "epathTempDelete_attr1",
              "epathTempDelete_attr2"),
      strlist("epathDelete_attr1",
              "epathDelete_attr2",
              "epathDelete_attr3",
              "epathDelete_attr4",
              "epathDelete_attr5",
              "epathDelete_attr6",
              "epathDelete_attr7",
              "epathDelete_attr8",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_p1_4_ecaAdd(Ptr<Tuple> epath)
{
  RAPIDNET_LOG_INFO("Prov_p1_4_ecaAdd triggered");

  Ptr<Tuple> result = epath;

  result = result->Project(
      PATH,
      strlist("epath_attr1",
              "epath_attr2",
              "epath_attr3",
              "epath_attr4",
              "epath_attr5"),
      strlist("path_attr1",
              "path_attr2",
              "path_attr3",
              "path_attr4",
              "path_attr5"));

  Insert(result);
}

void PktfwdProv::Prov_p1_4_ecaDel(Ptr<Tuple> epathDelete)
{
  RAPIDNET_LOG_INFO("Prov_p1_4_ecaDel triggered");

  Ptr<Tuple> result = epathDelete;

  result = result->Project(
      PATH,
      strlist("epathDelete_attr1",
              "epathDelete_attr2",
              "epathDelete_attr3",
              "epathDelete_attr4",
              "epathDelete_attr5"),
      strlist("path_attr1",
              "path_attr2",
              "path_attr3",
              "path_attr4",
              "path_attr5"));

  Delete(result);
}

void PktfwdProv::Prov_p1_5_ecaAdd(Ptr<Tuple> epath)
{
  RAPIDNET_LOG_INFO("Prov_p1_5_ecaAdd triggered");

  Ptr<Tuple> result = epath;

  result->Assign(Assignor::New("VID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                Operation::New(RN_PLUS,
                                                                                               Operation::New(RN_PLUS,
                                                                                                              ValueExpr::New(StrValue::New("path")),
                                                                                                              VarExpr::New("epath_attr1")),
                                                                                               VarExpr::New("epath_attr2")),
                                                                                VarExpr::New("epath_attr3")),
                                                                 VarExpr::New("epath_attr4")),
                                                  VarExpr::New("epath_attr5")))));

  result->Assign(Assignor::New("Score",
                               ValueExpr::New(RealValue::New(-1))));

  result = result->Project(
      PROV,
      strlist("epath_attr1",
              "VID",
              "epath_attr6",
              "epath_attr8",
              "Score"),
      strlist("prov_attr1",
              "prov_attr2",
              "prov_attr3",
              "prov_attr4",
              "prov_attr5"));

  Insert(result);
}

void PktfwdProv::Prov_p1_5_ecaDel(Ptr<Tuple> epathDelete)
{
  RAPIDNET_LOG_INFO("Prov_p1_5_ecaDel triggered");

  Ptr<Tuple> result = epathDelete;

  result->Assign(Assignor::New("VID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                Operation::New(RN_PLUS,
                                                                                               Operation::New(RN_PLUS,
                                                                                                              ValueExpr::New(StrValue::New("path")),
                                                                                                              VarExpr::New("epathDelete_attr1")),
                                                                                               VarExpr::New("epathDelete_attr2")),
                                                                                VarExpr::New("epathDelete_attr3")),
                                                                 VarExpr::New("epathDelete_attr4")),
                                                  VarExpr::New("epathDelete_attr5")))));

  result->Assign(Assignor::New("Score",
                               ValueExpr::New(RealValue::New(-1))));

  result = result->Project(
      PROV,
      strlist("epathDelete_attr1",
              "VID",
              "epathDelete_attr6",
              "epathDelete_attr8",
              "Score"),
      strlist("prov_attr1",
              "prov_attr2",
              "prov_attr3",
              "prov_attr4",
              "prov_attr5"));

  Delete(result);
}

void PktfwdProv::Prov_p2_1Eca0Ins(Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO("Prov_p2_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation(BESTPATH)->Join(
      link,
      strlist("bestPath_attr1"),
      strlist("link_attr1"));

  result->Assign(Assignor::New("PID1",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                ValueExpr::New(StrValue::New("link")),
                                                                                VarExpr::New("link_attr1")),
                                                                 VarExpr::New("link_attr2")),
                                                  VarExpr::New("link_attr3")))));

  result->Assign(Assignor::New("List",
                               FAppend::New(
                                   VarExpr::New("PID1"))));

  result->Assign(Assignor::New("PID2",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                Operation::New(RN_PLUS,
                                                                                               Operation::New(RN_PLUS,
                                                                                                              ValueExpr::New(StrValue::New("bestPath")),
                                                                                                              VarExpr::New("link_attr1")),
                                                                                               VarExpr::New("bestPath_attr2")),
                                                                                VarExpr::New("bestPath_attr3")),
                                                                 VarExpr::New("bestPath_attr4")),
                                                  VarExpr::New("bestPath_attr5")))));

  result->Assign(Assignor::New("List2",
                               FAppend::New(
                                   VarExpr::New("PID2"))));

  result->Assign(Assignor::New("List",
                               FConcat::New(
                                   VarExpr::New("List"),
                                   VarExpr::New("List2"))));

  result->Assign(Assignor::New("C",
                               Operation::New(RN_PLUS,
                                              VarExpr::New("link_attr3"),
                                              VarExpr::New("bestPath_attr3"))));

  result->Assign(Assignor::New("P1",
                               FAppend::New(
                                   VarExpr::New("link_attr2"))));

  result->Assign(Assignor::New("P",
                               FConcat::New(
                                   VarExpr::New("P1"),
                                   VarExpr::New("bestPath_attr4"))));

  result->Assign(Assignor::New("N",
                               VarExpr::New("link_attr1")));

  result->Assign(Assignor::New("RLOC",
                               VarExpr::New("link_attr1")));

  result->Assign(Assignor::New("RWeight",
                               ValueExpr::New(RealValue::New(1))));

  result->Assign(Assignor::New("R",
                               ValueExpr::New(StrValue::New("p2"))));

  result->Assign(Assignor::New("RID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 VarExpr::New("R"),
                                                                 VarExpr::New("RLOC")),
                                                  VarExpr::New("List")))));

  result = result->Select(Selector::New(
      Operation::New(RN_EQ,
                     FMember::New(
                         VarExpr::New("bestPath_attr4"),
                         VarExpr::New("link_attr2")),
                     ValueExpr::New(Int32Value::New(0)))));

  result = result->Project(
      EPATHTEMP,
      strlist("RLOC",
              "link_attr2",
              "bestPath_attr2",
              "C",
              "P",
              "N",
              "RID",
              "RWeight",
              "R",
              "List",
              "RLOC"),
      strlist("epathTemp_attr1",
              "epathTemp_attr2",
              "epathTemp_attr3",
              "epathTemp_attr4",
              "epathTemp_attr5",
              "epathTemp_attr6",
              "epathTemp_attr7",
              "epathTemp_attr8",
              "epathTemp_attr9",
              "epathTemp_attr10",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_p2_1Eca0Del(Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO("Prov_p2_1Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation(BESTPATH)->Join(
      link,
      strlist("bestPath_attr1"),
      strlist("link_attr1"));

  result->Assign(Assignor::New("PID1",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                ValueExpr::New(StrValue::New("link")),
                                                                                VarExpr::New("link_attr1")),
                                                                 VarExpr::New("link_attr2")),
                                                  VarExpr::New("link_attr3")))));

  result->Assign(Assignor::New("List",
                               FAppend::New(
                                   VarExpr::New("PID1"))));

  result->Assign(Assignor::New("PID2",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                Operation::New(RN_PLUS,
                                                                                               Operation::New(RN_PLUS,
                                                                                                              ValueExpr::New(StrValue::New("bestPath")),
                                                                                                              VarExpr::New("link_attr1")),
                                                                                               VarExpr::New("bestPath_attr2")),
                                                                                VarExpr::New("bestPath_attr3")),
                                                                 VarExpr::New("bestPath_attr4")),
                                                  VarExpr::New("bestPath_attr5")))));

  result->Assign(Assignor::New("List2",
                               FAppend::New(
                                   VarExpr::New("PID2"))));

  result->Assign(Assignor::New("List",
                               FConcat::New(
                                   VarExpr::New("List"),
                                   VarExpr::New("List2"))));

  result->Assign(Assignor::New("C",
                               Operation::New(RN_PLUS,
                                              VarExpr::New("link_attr3"),
                                              VarExpr::New("bestPath_attr3"))));

  result->Assign(Assignor::New("P1",
                               FAppend::New(
                                   VarExpr::New("link_attr2"))));

  result->Assign(Assignor::New("P",
                               FConcat::New(
                                   VarExpr::New("P1"),
                                   VarExpr::New("bestPath_attr4"))));

  result->Assign(Assignor::New("N",
                               VarExpr::New("link_attr1")));

  result->Assign(Assignor::New("RLOC",
                               VarExpr::New("link_attr1")));

  result->Assign(Assignor::New("RWeight",
                               ValueExpr::New(RealValue::New(1))));

  result->Assign(Assignor::New("R",
                               ValueExpr::New(StrValue::New("p2"))));

  result->Assign(Assignor::New("RID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 VarExpr::New("R"),
                                                                 VarExpr::New("RLOC")),
                                                  VarExpr::New("List")))));

  result = result->Select(Selector::New(
      Operation::New(RN_EQ,
                     FMember::New(
                         VarExpr::New("bestPath_attr4"),
                         VarExpr::New("link_attr2")),
                     ValueExpr::New(Int32Value::New(0)))));

  result = result->Project(
      EPATHTEMPDELETE,
      strlist("RLOC",
              "link_attr2",
              "bestPath_attr2",
              "C",
              "P",
              "N",
              "RID",
              "RWeight",
              "R",
              "List",
              "RLOC"),
      strlist("epathTempDelete_attr1",
              "epathTempDelete_attr2",
              "epathTempDelete_attr3",
              "epathTempDelete_attr4",
              "epathTempDelete_attr5",
              "epathTempDelete_attr6",
              "epathTempDelete_attr7",
              "epathTempDelete_attr8",
              "epathTempDelete_attr9",
              "epathTempDelete_attr10",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_p2_1Eca3Ins(Ptr<Tuple> bestPath)
{
  RAPIDNET_LOG_INFO("Prov_p2_1Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation(LINK)->Join(
      bestPath,
      strlist("link_attr1"),
      strlist("bestPath_attr1"));

  result->Assign(Assignor::New("PID1",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                ValueExpr::New(StrValue::New("link")),
                                                                                VarExpr::New("bestPath_attr1")),
                                                                 VarExpr::New("link_attr2")),
                                                  VarExpr::New("link_attr3")))));

  result->Assign(Assignor::New("List",
                               FAppend::New(
                                   VarExpr::New("PID1"))));

  result->Assign(Assignor::New("PID2",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                Operation::New(RN_PLUS,
                                                                                               Operation::New(RN_PLUS,
                                                                                                              ValueExpr::New(StrValue::New("bestPath")),
                                                                                                              VarExpr::New("bestPath_attr1")),
                                                                                               VarExpr::New("bestPath_attr2")),
                                                                                VarExpr::New("bestPath_attr3")),
                                                                 VarExpr::New("bestPath_attr4")),
                                                  VarExpr::New("bestPath_attr5")))));

  result->Assign(Assignor::New("List2",
                               FAppend::New(
                                   VarExpr::New("PID2"))));

  result->Assign(Assignor::New("List",
                               FConcat::New(
                                   VarExpr::New("List"),
                                   VarExpr::New("List2"))));

  result->Assign(Assignor::New("C",
                               Operation::New(RN_PLUS,
                                              VarExpr::New("link_attr3"),
                                              VarExpr::New("bestPath_attr3"))));

  result->Assign(Assignor::New("P1",
                               FAppend::New(
                                   VarExpr::New("link_attr2"))));

  result->Assign(Assignor::New("P",
                               FConcat::New(
                                   VarExpr::New("P1"),
                                   VarExpr::New("bestPath_attr4"))));

  result->Assign(Assignor::New("N",
                               VarExpr::New("bestPath_attr1")));

  result->Assign(Assignor::New("RLOC",
                               VarExpr::New("bestPath_attr1")));

  result->Assign(Assignor::New("RWeight",
                               ValueExpr::New(RealValue::New(1))));

  result->Assign(Assignor::New("R",
                               ValueExpr::New(StrValue::New("p2"))));

  result->Assign(Assignor::New("RID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 VarExpr::New("R"),
                                                                 VarExpr::New("RLOC")),
                                                  VarExpr::New("List")))));

  result = result->Select(Selector::New(
      Operation::New(RN_EQ,
                     FMember::New(
                         VarExpr::New("bestPath_attr4"),
                         VarExpr::New("link_attr2")),
                     ValueExpr::New(Int32Value::New(0)))));

  result = result->Project(
      EPATHTEMP,
      strlist("RLOC",
              "link_attr2",
              "bestPath_attr2",
              "C",
              "P",
              "N",
              "RID",
              "RWeight",
              "R",
              "List",
              "RLOC"),
      strlist("epathTemp_attr1",
              "epathTemp_attr2",
              "epathTemp_attr3",
              "epathTemp_attr4",
              "epathTemp_attr5",
              "epathTemp_attr6",
              "epathTemp_attr7",
              "epathTemp_attr8",
              "epathTemp_attr9",
              "epathTemp_attr10",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_p2_1Eca3Del(Ptr<Tuple> bestPath)
{
  RAPIDNET_LOG_INFO("Prov_p2_1Eca3Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation(LINK)->Join(
      bestPath,
      strlist("link_attr1"),
      strlist("bestPath_attr1"));

  result->Assign(Assignor::New("PID1",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                ValueExpr::New(StrValue::New("link")),
                                                                                VarExpr::New("bestPath_attr1")),
                                                                 VarExpr::New("link_attr2")),
                                                  VarExpr::New("link_attr3")))));

  result->Assign(Assignor::New("List",
                               FAppend::New(
                                   VarExpr::New("PID1"))));

  result->Assign(Assignor::New("PID2",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                Operation::New(RN_PLUS,
                                                                                               Operation::New(RN_PLUS,
                                                                                                              ValueExpr::New(StrValue::New("bestPath")),
                                                                                                              VarExpr::New("bestPath_attr1")),
                                                                                               VarExpr::New("bestPath_attr2")),
                                                                                VarExpr::New("bestPath_attr3")),
                                                                 VarExpr::New("bestPath_attr4")),
                                                  VarExpr::New("bestPath_attr5")))));

  result->Assign(Assignor::New("List2",
                               FAppend::New(
                                   VarExpr::New("PID2"))));

  result->Assign(Assignor::New("List",
                               FConcat::New(
                                   VarExpr::New("List"),
                                   VarExpr::New("List2"))));

  result->Assign(Assignor::New("C",
                               Operation::New(RN_PLUS,
                                              VarExpr::New("link_attr3"),
                                              VarExpr::New("bestPath_attr3"))));

  result->Assign(Assignor::New("P1",
                               FAppend::New(
                                   VarExpr::New("link_attr2"))));

  result->Assign(Assignor::New("P",
                               FConcat::New(
                                   VarExpr::New("P1"),
                                   VarExpr::New("bestPath_attr4"))));

  result->Assign(Assignor::New("N",
                               VarExpr::New("bestPath_attr1")));

  result->Assign(Assignor::New("RLOC",
                               VarExpr::New("bestPath_attr1")));

  result->Assign(Assignor::New("RWeight",
                               ValueExpr::New(RealValue::New(1))));

  result->Assign(Assignor::New("R",
                               ValueExpr::New(StrValue::New("p2"))));

  result->Assign(Assignor::New("RID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 VarExpr::New("R"),
                                                                 VarExpr::New("RLOC")),
                                                  VarExpr::New("List")))));

  result = result->Select(Selector::New(
      Operation::New(RN_EQ,
                     FMember::New(
                         VarExpr::New("bestPath_attr4"),
                         VarExpr::New("link_attr2")),
                     ValueExpr::New(Int32Value::New(0)))));

  result = result->Project(
      EPATHTEMPDELETE,
      strlist("RLOC",
              "link_attr2",
              "bestPath_attr2",
              "C",
              "P",
              "N",
              "RID",
              "RWeight",
              "R",
              "List",
              "RLOC"),
      strlist("epathTempDelete_attr1",
              "epathTempDelete_attr2",
              "epathTempDelete_attr3",
              "epathTempDelete_attr4",
              "epathTempDelete_attr5",
              "epathTempDelete_attr6",
              "epathTempDelete_attr7",
              "epathTempDelete_attr8",
              "epathTempDelete_attr9",
              "epathTempDelete_attr10",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_p3_1Eca0Ins(Ptr<Tuple> bestPath)
{
  RAPIDNET_LOG_INFO("Prov_p3_1Eca0Ins triggered");

  Ptr<Tuple> result = bestPath;

  result->Assign(Assignor::New("PID1",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                Operation::New(RN_PLUS,
                                                                                               Operation::New(RN_PLUS,
                                                                                                              ValueExpr::New(StrValue::New("path")),
                                                                                                              VarExpr::New("bestPath_attr1")),
                                                                                               VarExpr::New("bestPath_attr2")),
                                                                                VarExpr::New("bestPath_attr3")),
                                                                 VarExpr::New("bestPath_attr4")),
                                                  VarExpr::New("bestPath_attr5")))));

  result->Assign(Assignor::New("List",
                               FAppend::New(
                                   VarExpr::New("PID1"))));

  result->Assign(Assignor::New("RLOC",
                               VarExpr::New("bestPath_attr1")));

  result->Assign(Assignor::New("RWeight",
                               ValueExpr::New(RealValue::New(1))));

  result->Assign(Assignor::New("R",
                               ValueExpr::New(StrValue::New("p3"))));

  result->Assign(Assignor::New("RID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 VarExpr::New("R"),
                                                                 VarExpr::New("RLOC")),
                                                  VarExpr::New("List")))));

  result = result->Project(
      EBESTPATHTEMP,
      strlist("RLOC",
              "bestPath_attr1",
              "bestPath_attr2",
              "bestPath_attr3",
              "bestPath_attr4",
              "bestPath_attr5",
              "RID",
              "RWeight",
              "R",
              "List",
              "RLOC"),
      strlist("ebestPathTemp_attr1",
              "ebestPathTemp_attr2",
              "ebestPathTemp_attr3",
              "ebestPathTemp_attr4",
              "ebestPathTemp_attr5",
              "ebestPathTemp_attr6",
              "ebestPathTemp_attr7",
              "ebestPathTemp_attr8",
              "ebestPathTemp_attr9",
              "ebestPathTemp_attr10",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_p3_1Eca0Del(Ptr<Tuple> bestPath)
{
  RAPIDNET_LOG_INFO("Prov_p3_1Eca0Del triggered");

  Ptr<Tuple> result = bestPath;

  result->Assign(Assignor::New("PID1",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                Operation::New(RN_PLUS,
                                                                                               Operation::New(RN_PLUS,
                                                                                                              ValueExpr::New(StrValue::New("path")),
                                                                                                              VarExpr::New("bestPath_attr1")),
                                                                                               VarExpr::New("bestPath_attr2")),
                                                                                VarExpr::New("bestPath_attr3")),
                                                                 VarExpr::New("bestPath_attr4")),
                                                  VarExpr::New("bestPath_attr5")))));

  result->Assign(Assignor::New("List",
                               FAppend::New(
                                   VarExpr::New("PID1"))));

  result->Assign(Assignor::New("RLOC",
                               VarExpr::New("bestPath_attr1")));

  result->Assign(Assignor::New("RWeight",
                               ValueExpr::New(RealValue::New(1))));

  result->Assign(Assignor::New("R",
                               ValueExpr::New(StrValue::New("p3"))));

  result->Assign(Assignor::New("RID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 VarExpr::New("R"),
                                                                 VarExpr::New("RLOC")),
                                                  VarExpr::New("List")))));

  result = result->Project(
      EBESTPATHTEMPDELETE,
      strlist("RLOC",
              "bestPath_attr1",
              "bestPath_attr2",
              "bestPath_attr3",
              "bestPath_attr4",
              "bestPath_attr5",
              "RID",
              "RWeight",
              "R",
              "List",
              "RLOC"),
      strlist("ebestPathTempDelete_attr1",
              "ebestPathTempDelete_attr2",
              "ebestPathTempDelete_attr3",
              "ebestPathTempDelete_attr4",
              "ebestPathTempDelete_attr5",
              "ebestPathTempDelete_attr6",
              "ebestPathTempDelete_attr7",
              "ebestPathTempDelete_attr8",
              "ebestPathTempDelete_attr9",
              "ebestPathTempDelete_attr10",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_p3_2_ecaAdd(Ptr<Tuple> ebestPathTemp)
{
  RAPIDNET_LOG_INFO("Prov_p3_2_ecaAdd triggered");

  Ptr<Tuple> result = ebestPathTemp;

  result = result->Project(
      RULEEXEC,
      strlist("ebestPathTemp_attr1",
              "ebestPathTemp_attr7",
              "ebestPathTemp_attr8",
              "ebestPathTemp_attr9",
              "ebestPathTemp_attr10"),
      strlist("ruleExec_attr1",
              "ruleExec_attr2",
              "ruleExec_attr3",
              "ruleExec_attr4",
              "ruleExec_attr5"));

  Insert(result);
}

void PktfwdProv::Prov_p3_2_ecaDel(Ptr<Tuple> ebestPathTempDelete)
{
  RAPIDNET_LOG_INFO("Prov_p3_2_ecaDel triggered");

  Ptr<Tuple> result = ebestPathTempDelete;

  result = result->Project(
      RULEEXEC,
      strlist("ebestPathTempDelete_attr1",
              "ebestPathTempDelete_attr7",
              "ebestPathTempDelete_attr8",
              "ebestPathTempDelete_attr9",
              "ebestPathTempDelete_attr10"),
      strlist("ruleExec_attr1",
              "ruleExec_attr2",
              "ruleExec_attr3",
              "ruleExec_attr4",
              "ruleExec_attr5"));

  Delete(result);
}

void PktfwdProv::Prov_p3_3_ecaAdd(Ptr<Tuple> ebestPathTemp)
{
  RAPIDNET_LOG_INFO("Prov_p3_3_ecaAdd triggered");

  Ptr<Tuple> result = ebestPathTemp;

  result = result->Project(
      EBESTPATH,
      strlist("ebestPathTemp_attr2",
              "ebestPathTemp_attr3",
              "ebestPathTemp_attr4",
              "ebestPathTemp_attr5",
              "ebestPathTemp_attr6",
              "ebestPathTemp_attr7",
              "ebestPathTemp_attr8",
              "ebestPathTemp_attr1",
              "ebestPathTemp_attr2"),
      strlist("ebestPath_attr1",
              "ebestPath_attr2",
              "ebestPath_attr3",
              "ebestPath_attr4",
              "ebestPath_attr5",
              "ebestPath_attr6",
              "ebestPath_attr7",
              "ebestPath_attr8",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_p3_3_ecaDel(Ptr<Tuple> ebestPathTempDelete)
{
  RAPIDNET_LOG_INFO("Prov_p3_3_ecaDel triggered");

  Ptr<Tuple> result = ebestPathTempDelete;

  result = result->Project(
      EBESTPATHDELETE,
      strlist("ebestPathTempDelete_attr2",
              "ebestPathTempDelete_attr3",
              "ebestPathTempDelete_attr4",
              "ebestPathTempDelete_attr5",
              "ebestPathTempDelete_attr6",
              "ebestPathTempDelete_attr7",
              "ebestPathTempDelete_attr8",
              "ebestPathTempDelete_attr1",
              "ebestPathTempDelete_attr2"),
      strlist("ebestPathDelete_attr1",
              "ebestPathDelete_attr2",
              "ebestPathDelete_attr3",
              "ebestPathDelete_attr4",
              "ebestPathDelete_attr5",
              "ebestPathDelete_attr6",
              "ebestPathDelete_attr7",
              "ebestPathDelete_attr8",
              RN_DEST));

  Send(result);
}

void PktfwdProv::P3eca(Ptr<Tuple> path)
{
  RAPIDNET_LOG_INFO("P3eca triggered");

  Ptr<Tuple> result = path;

  result = result->Project(
      BESTPATH,
      strlist("path_attr1",
              "path_attr2",
              "path_attr3",
              "path_attr4",
              "path_attr5"),
      strlist("bestPath_attr1",
              "bestPath_attr2",
              "bestPath_attr3",
              "bestPath_attr4",
              "bestPath_attr5"));

  m_aggr_bestpathMinC->Insert(result);
}

void PktfwdProv::P3eca2(Ptr<Tuple> path)
{
  RAPIDNET_LOG_INFO("P3eca2 triggered");

  Ptr<Tuple> result = path;

  result = result->Project(
      BESTPATH,
      strlist("path_attr1",
              "path_attr2",
              "path_attr3",
              "path_attr4",
              "path_attr5"),
      strlist("bestPath_attr1",
              "bestPath_attr2",
              "bestPath_attr3",
              "bestPath_attr4",
              "bestPath_attr5"));

  m_aggr_bestpathMinC->Delete(result);
}

void PktfwdProv::Prov_p3_5_ecaAdd(Ptr<Tuple> ebestPath)
{
  RAPIDNET_LOG_INFO("Prov_p3_5_ecaAdd triggered");

  Ptr<Tuple> result = ebestPath;

  result->Assign(Assignor::New("VID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                Operation::New(RN_PLUS,
                                                                                               Operation::New(RN_PLUS,
                                                                                                              ValueExpr::New(StrValue::New("bestPath")),
                                                                                                              VarExpr::New("ebestPath_attr1")),
                                                                                               VarExpr::New("ebestPath_attr2")),
                                                                                VarExpr::New("ebestPath_attr3")),
                                                                 VarExpr::New("ebestPath_attr4")),
                                                  VarExpr::New("ebestPath_attr5")))));

  result->Assign(Assignor::New("Score",
                               ValueExpr::New(RealValue::New(-1))));

  result = result->Project(
      PROV,
      strlist("ebestPath_attr1",
              "VID",
              "ebestPath_attr6",
              "ebestPath_attr8",
              "Score"),
      strlist("prov_attr1",
              "prov_attr2",
              "prov_attr3",
              "prov_attr4",
              "prov_attr5"));

  Insert(result);
}

void PktfwdProv::Prov_p3_5_ecaDel(Ptr<Tuple> ebestPathDelete)
{
  RAPIDNET_LOG_INFO("Prov_p3_5_ecaDel triggered");

  Ptr<Tuple> result = ebestPathDelete;

  result->Assign(Assignor::New("VID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                Operation::New(RN_PLUS,
                                                                                               Operation::New(RN_PLUS,
                                                                                                              ValueExpr::New(StrValue::New("bestPath")),
                                                                                                              VarExpr::New("ebestPathDelete_attr1")),
                                                                                               VarExpr::New("ebestPathDelete_attr2")),
                                                                                VarExpr::New("ebestPathDelete_attr3")),
                                                                 VarExpr::New("ebestPathDelete_attr4")),
                                                  VarExpr::New("ebestPathDelete_attr5")))));

  result->Assign(Assignor::New("Score",
                               ValueExpr::New(RealValue::New(-1))));

  result = result->Project(
      PROV,
      strlist("ebestPathDelete_attr1",
              "VID",
              "ebestPathDelete_attr6",
              "ebestPathDelete_attr8",
              "Score"),
      strlist("prov_attr1",
              "prov_attr2",
              "prov_attr3",
              "prov_attr4",
              "prov_attr5"));

  Delete(result);
}

void PktfwdProv::Prov_i0_1_ecaperiodic()
{
  RAPIDNET_LOG_INFO("Prov_i0_1_ecaperiodic triggered");

  SendLocal(rtuple(PROV_I0_1_ECAPERIODIC, attrlist(
                                              attr("prov_i0_1_ecaperiodic_attr1", Ipv4Value, GetAddress()),
                                              attr("prov_i0_1_ecaperiodic_attr2", Int32Value, rand()))));

  if (++m_count_prov_i0_1_ecaperiodic < 9000)
  {
    m_event_prov_i0_1_ecaperiodic = Simulator::Schedule(Seconds(0.01),
                                                        &PktfwdProv::Prov_i0_1_ecaperiodic, this);
  }
}

void PktfwdProv::Prov_i0_1_eca(Ptr<Tuple> prov_i0_1_ecaperiodic)
{
  RAPIDNET_LOG_INFO("Prov_i0_1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(STATUS)->Join(
      prov_i0_1_ecaperiodic,
      strlist("status_attr1"),
      strlist("prov_i0_1_ecaperiodic_attr1"));

  result->Assign(Assignor::New("PID1",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                Operation::New(RN_PLUS,
                                                                                               ValueExpr::New(StrValue::New("periodic")),
                                                                                               VarExpr::New("prov_i0_1_ecaperiodic_attr1")),
                                                                                VarExpr::New("prov_i0_1_ecaperiodic_attr2")),
                                                                 ValueExpr::New(RealValue::New(0.01))),
                                                  ValueExpr::New(Int32Value::New(9000))))));

  result->Assign(Assignor::New("List",
                               FAppend::New(
                                   VarExpr::New("PID1"))));

  result->Assign(Assignor::New("PID2",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  ValueExpr::New(StrValue::New("status")),
                                                  VarExpr::New("prov_i0_1_ecaperiodic_attr1")))));

  result->Assign(Assignor::New("List2",
                               FAppend::New(
                                   VarExpr::New("PID2"))));

  result->Assign(Assignor::New("List",
                               FConcat::New(
                                   VarExpr::New("List"),
                                   VarExpr::New("List2"))));

  result->Assign(Assignor::New("Ind",
                               FRand::New()));

  result->Assign(Assignor::New("RLOC",
                               VarExpr::New("prov_i0_1_ecaperiodic_attr1")));

  result->Assign(Assignor::New("RWeight",
                               ValueExpr::New(RealValue::New(1))));

  result->Assign(Assignor::New("R",
                               ValueExpr::New(StrValue::New("i0"))));

  result->Assign(Assignor::New("RID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 VarExpr::New("R"),
                                                                 VarExpr::New("RLOC")),
                                                  VarExpr::New("List")))));

  result = result->Project(
      EINITTEMP,
      strlist("RLOC",
              "prov_i0_1_ecaperiodic_attr1",
              "Ind",
              "RID",
              "RWeight",
              "R",
              "List",
              "RLOC"),
      strlist("einitTemp_attr1",
              "einitTemp_attr2",
              "einitTemp_attr3",
              "einitTemp_attr4",
              "einitTemp_attr5",
              "einitTemp_attr6",
              "einitTemp_attr7",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_i0_2_ecaAdd(Ptr<Tuple> einitTemp)
{
  RAPIDNET_LOG_INFO("Prov_i0_2_ecaAdd triggered");

  Ptr<Tuple> result = einitTemp;

  result = result->Project(
      RULEEXEC,
      strlist("einitTemp_attr1",
              "einitTemp_attr4",
              "einitTemp_attr5",
              "einitTemp_attr6",
              "einitTemp_attr7"),
      strlist("ruleExec_attr1",
              "ruleExec_attr2",
              "ruleExec_attr3",
              "ruleExec_attr4",
              "ruleExec_attr5"));

  Insert(result);
}

void PktfwdProv::Prov_i0_3_ecaAdd(Ptr<Tuple> einitTemp)
{
  RAPIDNET_LOG_INFO("Prov_i0_3_ecaAdd triggered");

  Ptr<Tuple> result = einitTemp;

  result = result->Project(
      EINIT,
      strlist("einitTemp_attr2",
              "einitTemp_attr3",
              "einitTemp_attr4",
              "einitTemp_attr5",
              "einitTemp_attr1",
              "einitTemp_attr2"),
      strlist("einit_attr1",
              "einit_attr2",
              "einit_attr3",
              "einit_attr4",
              "einit_attr5",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_i0_4_ecaAdd(Ptr<Tuple> einit)
{
  RAPIDNET_LOG_INFO("Prov_i0_4_ecaAdd triggered");

  Ptr<Tuple> result = einit;

  result = result->Project(
      INIT,
      strlist("einit_attr1",
              "einit_attr2"),
      strlist("init_attr1",
              "init_attr2"));

  SendLocal(result);
}

void PktfwdProv::Prov_i0_5_ecaAdd(Ptr<Tuple> einit)
{
  RAPIDNET_LOG_INFO("Prov_i0_5_ecaAdd triggered");

  Ptr<Tuple> result = einit;

  result->Assign(Assignor::New("VID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 ValueExpr::New(StrValue::New("init")),
                                                                 VarExpr::New("einit_attr1")),
                                                  VarExpr::New("einit_attr2")))));

  result->Assign(Assignor::New("Score",
                               ValueExpr::New(RealValue::New(-1))));

  result = result->Project(
      PROV,
      strlist("einit_attr1",
              "VID",
              "einit_attr3",
              "einit_attr5",
              "Score"),
      strlist("prov_attr1",
              "prov_attr2",
              "prov_attr3",
              "prov_attr4",
              "prov_attr5"));

  Insert(result);
}

void PktfwdProv::Prov_i1_1_ecaAdd(Ptr<Tuple> init)
{
  RAPIDNET_LOG_INFO("Prov_i1_1_ecaAdd triggered");

  Ptr<RelationBase> result;

  result = GetRelation(TABLE)->Join(
      init,
      strlist("table_attr2", "table_attr1"),
      strlist("init_attr2", "init_attr1"));

  result->Assign(Assignor::New("PID1",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 ValueExpr::New(StrValue::New("init")),
                                                                 VarExpr::New("init_attr1")),
                                                  VarExpr::New("init_attr2")))));

  result->Assign(Assignor::New("List",
                               FAppend::New(
                                   VarExpr::New("PID1"))));

  result->Assign(Assignor::New("PID2",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                ValueExpr::New(StrValue::New("table")),
                                                                                VarExpr::New("init_attr1")),
                                                                 VarExpr::New("init_attr2")),
                                                  VarExpr::New("table_attr3")))));

  result->Assign(Assignor::New("List2",
                               FAppend::New(
                                   VarExpr::New("PID2"))));

  result->Assign(Assignor::New("List",
                               FConcat::New(
                                   VarExpr::New("List"),
                                   VarExpr::New("List2"))));

  result->Assign(Assignor::New("RLOC",
                               VarExpr::New("init_attr1")));

  result->Assign(Assignor::New("RWeight",
                               ValueExpr::New(RealValue::New(1))));

  result->Assign(Assignor::New("R",
                               ValueExpr::New(StrValue::New("i1"))));

  result->Assign(Assignor::New("RID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 VarExpr::New("R"),
                                                                 VarExpr::New("RLOC")),
                                                  VarExpr::New("List")))));

  result = result->Project(
      EESENDTEMP,
      strlist("RLOC",
              "init_attr1",
              "table_attr3",
              "RID",
              "RWeight",
              "R",
              "List",
              "RLOC"),
      strlist("eeSendTemp_attr1",
              "eeSendTemp_attr2",
              "eeSendTemp_attr3",
              "eeSendTemp_attr4",
              "eeSendTemp_attr5",
              "eeSendTemp_attr6",
              "eeSendTemp_attr7",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_i1_1_ecaDel(Ptr<Tuple> initDelete)
{
  RAPIDNET_LOG_INFO("Prov_i1_1_ecaDel triggered");

  Ptr<RelationBase> result;

  result = GetRelation(TABLE)->Join(
      initDelete,
      strlist("table_attr2", "table_attr1"),
      strlist("initDelete_attr2", "initDelete_attr1"));

  result->Assign(Assignor::New("PID1",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 ValueExpr::New(StrValue::New("init")),
                                                                 VarExpr::New("initDelete_attr1")),
                                                  VarExpr::New("initDelete_attr2")))));

  result->Assign(Assignor::New("List",
                               FAppend::New(
                                   VarExpr::New("PID1"))));

  result->Assign(Assignor::New("PID2",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                ValueExpr::New(StrValue::New("table")),
                                                                                VarExpr::New("initDelete_attr1")),
                                                                 VarExpr::New("initDelete_attr2")),
                                                  VarExpr::New("table_attr3")))));

  result->Assign(Assignor::New("List2",
                               FAppend::New(
                                   VarExpr::New("PID2"))));

  result->Assign(Assignor::New("List",
                               FConcat::New(
                                   VarExpr::New("List"),
                                   VarExpr::New("List2"))));

  result->Assign(Assignor::New("RLOC",
                               VarExpr::New("initDelete_attr1")));

  result->Assign(Assignor::New("RWeight",
                               ValueExpr::New(RealValue::New(1))));

  result->Assign(Assignor::New("R",
                               ValueExpr::New(StrValue::New("i1"))));

  result->Assign(Assignor::New("RID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 VarExpr::New("R"),
                                                                 VarExpr::New("RLOC")),
                                                  VarExpr::New("List")))));

  result = result->Project(
      EESENDTEMPDELETE,
      strlist("RLOC",
              "initDelete_attr1",
              "table_attr3",
              "RID",
              "RWeight",
              "R",
              "List",
              "RLOC"),
      strlist("eeSendTempDelete_attr1",
              "eeSendTempDelete_attr2",
              "eeSendTempDelete_attr3",
              "eeSendTempDelete_attr4",
              "eeSendTempDelete_attr5",
              "eeSendTempDelete_attr6",
              "eeSendTempDelete_attr7",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_i1_2_ecaAdd(Ptr<Tuple> eeSendTemp)
{
  RAPIDNET_LOG_INFO("Prov_i1_2_ecaAdd triggered");

  Ptr<Tuple> result = eeSendTemp;

  result = result->Project(
      RULEEXEC,
      strlist("eeSendTemp_attr1",
              "eeSendTemp_attr4",
              "eeSendTemp_attr5",
              "eeSendTemp_attr6",
              "eeSendTemp_attr7"),
      strlist("ruleExec_attr1",
              "ruleExec_attr2",
              "ruleExec_attr3",
              "ruleExec_attr4",
              "ruleExec_attr5"));

  Insert(result);
}

void PktfwdProv::Prov_i1_2_ecaDel(Ptr<Tuple> eeSendTempDelete)
{
  RAPIDNET_LOG_INFO("Prov_i1_2_ecaDel triggered");

  Ptr<Tuple> result = eeSendTempDelete;

  result = result->Project(
      RULEEXEC,
      strlist("eeSendTempDelete_attr1",
              "eeSendTempDelete_attr4",
              "eeSendTempDelete_attr5",
              "eeSendTempDelete_attr6",
              "eeSendTempDelete_attr7"),
      strlist("ruleExec_attr1",
              "ruleExec_attr2",
              "ruleExec_attr3",
              "ruleExec_attr4",
              "ruleExec_attr5"));

  Delete(result);
}

void PktfwdProv::Prov_i1_3_ecaAdd(Ptr<Tuple> eeSendTemp)
{
  RAPIDNET_LOG_INFO("Prov_i1_3_ecaAdd triggered");

  Ptr<Tuple> result = eeSendTemp;

  result = result->Project(
      EESEND,
      strlist("eeSendTemp_attr2",
              "eeSendTemp_attr3",
              "eeSendTemp_attr4",
              "eeSendTemp_attr5",
              "eeSendTemp_attr1",
              "eeSendTemp_attr2"),
      strlist("eeSend_attr1",
              "eeSend_attr2",
              "eeSend_attr3",
              "eeSend_attr4",
              "eeSend_attr5",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_i1_3_ecaDel(Ptr<Tuple> eeSendTempDelete)
{
  RAPIDNET_LOG_INFO("Prov_i1_3_ecaDel triggered");

  Ptr<Tuple> result = eeSendTempDelete;

  result = result->Project(
      EESENDDELETE,
      strlist("eeSendTempDelete_attr2",
              "eeSendTempDelete_attr3",
              "eeSendTempDelete_attr4",
              "eeSendTempDelete_attr5",
              "eeSendTempDelete_attr1",
              "eeSendTempDelete_attr2"),
      strlist("eeSendDelete_attr1",
              "eeSendDelete_attr2",
              "eeSendDelete_attr3",
              "eeSendDelete_attr4",
              "eeSendDelete_attr5",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_i1_4_ecaAdd(Ptr<Tuple> eeSend)
{
  RAPIDNET_LOG_INFO("Prov_i1_4_ecaAdd triggered");

  Ptr<Tuple> result = eeSend;

  result = result->Project(
      ESEND,
      strlist("eeSend_attr1",
              "eeSend_attr2"),
      strlist("eSend_attr1",
              "eSend_attr2"));

  SendLocal(result);
}

void PktfwdProv::Prov_i1_4_ecaDel(Ptr<Tuple> eeSendDelete)
{
  RAPIDNET_LOG_INFO("Prov_i1_4_ecaDel triggered");

  Ptr<Tuple> result = eeSendDelete;

  result = result->Project(
      ESEND,
      strlist("eeSendDelete_attr1",
              "eeSendDelete_attr2"),
      strlist("eSend_attr1",
              "eSend_attr2"));

  SendLocal(result);
}

void PktfwdProv::Prov_i1_5_ecaAdd(Ptr<Tuple> eeSend)
{
  RAPIDNET_LOG_INFO("Prov_i1_5_ecaAdd triggered");

  Ptr<Tuple> result = eeSend;

  result->Assign(Assignor::New("VID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 ValueExpr::New(StrValue::New("eSend")),
                                                                 VarExpr::New("eeSend_attr1")),
                                                  VarExpr::New("eeSend_attr2")))));

  result->Assign(Assignor::New("Score",
                               ValueExpr::New(RealValue::New(-1))));

  result = result->Project(
      PROV,
      strlist("eeSend_attr1",
              "VID",
              "eeSend_attr3",
              "eeSend_attr5",
              "Score"),
      strlist("prov_attr1",
              "prov_attr2",
              "prov_attr3",
              "prov_attr4",
              "prov_attr5"));

  Insert(result);
}

void PktfwdProv::Prov_i1_5_ecaDel(Ptr<Tuple> eeSendDelete)
{
  RAPIDNET_LOG_INFO("Prov_i1_5_ecaDel triggered");

  Ptr<Tuple> result = eeSendDelete;

  result->Assign(Assignor::New("VID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 ValueExpr::New(StrValue::New("eSend")),
                                                                 VarExpr::New("eeSendDelete_attr1")),
                                                  VarExpr::New("eeSendDelete_attr2")))));

  result->Assign(Assignor::New("Score",
                               ValueExpr::New(RealValue::New(-1))));

  result = result->Project(
      PROV,
      strlist("eeSendDelete_attr1",
              "VID",
              "eeSendDelete_attr3",
              "eeSendDelete_attr5",
              "Score"),
      strlist("prov_attr1",
              "prov_attr2",
              "prov_attr3",
              "prov_attr4",
              "prov_attr5"));

  Delete(result);
}

void PktfwdProv::Prov_r0_1_ecaAdd(Ptr<Tuple> eSend)
{
  RAPIDNET_LOG_INFO("Prov_r0_1_ecaAdd triggered");

  Ptr<Tuple> result = eSend;

  result->Assign(Assignor::New("PID1",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 ValueExpr::New(StrValue::New("eSend")),
                                                                 VarExpr::New("eSend_attr1")),
                                                  VarExpr::New("eSend_attr2")))));

  result->Assign(Assignor::New("List",
                               FAppend::New(
                                   VarExpr::New("PID1"))));

  result->Assign(Assignor::New("Time",
                               FNow::New()));

  result->Assign(Assignor::New("PID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  ValueExpr::New(StrValue::New("")),
                                                  VarExpr::New("Time")))));

  result->Assign(Assignor::New("Data",
                               ValueExpr::New(StrValue::New("0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"))));

  result->Assign(Assignor::New("RLOC",
                               VarExpr::New("eSend_attr1")));

  result->Assign(Assignor::New("RWeight",
                               ValueExpr::New(RealValue::New(1))));

  result->Assign(Assignor::New("R",
                               ValueExpr::New(StrValue::New("r0"))));

  result->Assign(Assignor::New("RID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 VarExpr::New("R"),
                                                                 VarExpr::New("RLOC")),
                                                  VarExpr::New("List")))));

  result = result->Project(
      EPACKETTEMP,
      strlist("RLOC",
              "eSend_attr1",
              "eSend_attr2",
              "PID",
              "Data",
              "RID",
              "RWeight",
              "R",
              "List",
              "RLOC"),
      strlist("epacketTemp_attr1",
              "epacketTemp_attr2",
              "epacketTemp_attr3",
              "epacketTemp_attr4",
              "epacketTemp_attr5",
              "epacketTemp_attr6",
              "epacketTemp_attr7",
              "epacketTemp_attr8",
              "epacketTemp_attr9",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_r0_1_ecaDel(Ptr<Tuple> eSendDelete)
{
  RAPIDNET_LOG_INFO("Prov_r0_1_ecaDel triggered");

  Ptr<Tuple> result = eSendDelete;

  result->Assign(Assignor::New("PID1",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 ValueExpr::New(StrValue::New("eSend")),
                                                                 VarExpr::New("eSendDelete_attr1")),
                                                  VarExpr::New("eSendDelete_attr2")))));

  result->Assign(Assignor::New("List",
                               FAppend::New(
                                   VarExpr::New("PID1"))));

  result->Assign(Assignor::New("Time",
                               FNow::New()));

  result->Assign(Assignor::New("PID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  ValueExpr::New(StrValue::New("")),
                                                  VarExpr::New("Time")))));

  result->Assign(Assignor::New("Data",
                               ValueExpr::New(StrValue::New("0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"))));

  result->Assign(Assignor::New("RLOC",
                               VarExpr::New("eSendDelete_attr1")));

  result->Assign(Assignor::New("RWeight",
                               ValueExpr::New(RealValue::New(1))));

  result->Assign(Assignor::New("R",
                               ValueExpr::New(StrValue::New("r0"))));

  result->Assign(Assignor::New("RID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 VarExpr::New("R"),
                                                                 VarExpr::New("RLOC")),
                                                  VarExpr::New("List")))));

  result = result->Project(
      EPACKETTEMPDELETE,
      strlist("RLOC",
              "eSendDelete_attr1",
              "eSendDelete_attr2",
              "PID",
              "Data",
              "RID",
              "RWeight",
              "R",
              "List",
              "RLOC"),
      strlist("epacketTempDelete_attr1",
              "epacketTempDelete_attr2",
              "epacketTempDelete_attr3",
              "epacketTempDelete_attr4",
              "epacketTempDelete_attr5",
              "epacketTempDelete_attr6",
              "epacketTempDelete_attr7",
              "epacketTempDelete_attr8",
              "epacketTempDelete_attr9",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_r0_2_ecaAdd(Ptr<Tuple> epacketTemp)
{
  RAPIDNET_LOG_INFO("Prov_r0_2_ecaAdd triggered");

  Ptr<Tuple> result = epacketTemp;

  result = result->Project(
      RULEEXEC,
      strlist("epacketTemp_attr1",
              "epacketTemp_attr6",
              "epacketTemp_attr7",
              "epacketTemp_attr8",
              "epacketTemp_attr9"),
      strlist("ruleExec_attr1",
              "ruleExec_attr2",
              "ruleExec_attr3",
              "ruleExec_attr4",
              "ruleExec_attr5"));

  Insert(result);
}

void PktfwdProv::Prov_r0_2_ecaDel(Ptr<Tuple> epacketTempDelete)
{
  RAPIDNET_LOG_INFO("Prov_r0_2_ecaDel triggered");

  Ptr<Tuple> result = epacketTempDelete;

  result = result->Project(
      RULEEXEC,
      strlist("epacketTempDelete_attr1",
              "epacketTempDelete_attr6",
              "epacketTempDelete_attr7",
              "epacketTempDelete_attr8",
              "epacketTempDelete_attr9"),
      strlist("ruleExec_attr1",
              "ruleExec_attr2",
              "ruleExec_attr3",
              "ruleExec_attr4",
              "ruleExec_attr5"));

  Delete(result);
}

void PktfwdProv::Prov_r0_3_ecaAdd(Ptr<Tuple> epacketTemp)
{
  RAPIDNET_LOG_INFO("Prov_r0_3_ecaAdd triggered");

  Ptr<Tuple> result = epacketTemp;

  result = result->Project(
      EPACKET,
      strlist("epacketTemp_attr2",
              "epacketTemp_attr3",
              "epacketTemp_attr4",
              "epacketTemp_attr5",
              "epacketTemp_attr6",
              "epacketTemp_attr7",
              "epacketTemp_attr1",
              "epacketTemp_attr2"),
      strlist("epacket_attr1",
              "epacket_attr2",
              "epacket_attr3",
              "epacket_attr4",
              "epacket_attr5",
              "epacket_attr6",
              "epacket_attr7",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_r0_3_ecaDel(Ptr<Tuple> epacketTempDelete)
{
  RAPIDNET_LOG_INFO("Prov_r0_3_ecaDel triggered");

  Ptr<Tuple> result = epacketTempDelete;

  result = result->Project(
      EPACKETDELETE,
      strlist("epacketTempDelete_attr2",
              "epacketTempDelete_attr3",
              "epacketTempDelete_attr4",
              "epacketTempDelete_attr5",
              "epacketTempDelete_attr6",
              "epacketTempDelete_attr7",
              "epacketTempDelete_attr1",
              "epacketTempDelete_attr2"),
      strlist("epacketDelete_attr1",
              "epacketDelete_attr2",
              "epacketDelete_attr3",
              "epacketDelete_attr4",
              "epacketDelete_attr5",
              "epacketDelete_attr6",
              "epacketDelete_attr7",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_r0_4_ecaAdd(Ptr<Tuple> epacket)
{
  RAPIDNET_LOG_INFO("Prov_r0_4_ecaAdd triggered");

  Ptr<Tuple> result = epacket;

  result = result->Project(
      PACKET,
      strlist("epacket_attr1",
              "epacket_attr2",
              "epacket_attr3",
              "epacket_attr4"),
      strlist("packet_attr1",
              "packet_attr2",
              "packet_attr3",
              "packet_attr4"));

  SendLocal(result);
}

void PktfwdProv::Prov_r0_4_ecaDel(Ptr<Tuple> epacketDelete)
{
  RAPIDNET_LOG_INFO("Prov_r0_4_ecaDel triggered");

  Ptr<Tuple> result = epacketDelete;

  result = result->Project(
      PACKET,
      strlist("epacketDelete_attr1",
              "epacketDelete_attr2",
              "epacketDelete_attr3",
              "epacketDelete_attr4"),
      strlist("packet_attr1",
              "packet_attr2",
              "packet_attr3",
              "packet_attr4"));

  SendLocal(result);
}

void PktfwdProv::Prov_r0_5_ecaAdd(Ptr<Tuple> epacket)
{
  RAPIDNET_LOG_INFO("Prov_r0_5_ecaAdd triggered");

  Ptr<Tuple> result = epacket;

  result->Assign(Assignor::New("VID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                Operation::New(RN_PLUS,
                                                                                               ValueExpr::New(StrValue::New("packet")),
                                                                                               VarExpr::New("epacket_attr1")),
                                                                                VarExpr::New("epacket_attr2")),
                                                                 VarExpr::New("epacket_attr3")),
                                                  VarExpr::New("epacket_attr4")))));

  result->Assign(Assignor::New("Score",
                               ValueExpr::New(RealValue::New(-1))));

  result = result->Project(
      PROV,
      strlist("epacket_attr1",
              "VID",
              "epacket_attr5",
              "epacket_attr7",
              "Score"),
      strlist("prov_attr1",
              "prov_attr2",
              "prov_attr3",
              "prov_attr4",
              "prov_attr5"));

  Insert(result);
}

void PktfwdProv::Prov_r0_5_ecaDel(Ptr<Tuple> epacketDelete)
{
  RAPIDNET_LOG_INFO("Prov_r0_5_ecaDel triggered");

  Ptr<Tuple> result = epacketDelete;

  result->Assign(Assignor::New("VID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                Operation::New(RN_PLUS,
                                                                                               ValueExpr::New(StrValue::New("packet")),
                                                                                               VarExpr::New("epacketDelete_attr1")),
                                                                                VarExpr::New("epacketDelete_attr2")),
                                                                 VarExpr::New("epacketDelete_attr3")),
                                                  VarExpr::New("epacketDelete_attr4")))));

  result->Assign(Assignor::New("Score",
                               ValueExpr::New(RealValue::New(-1))));

  result = result->Project(
      PROV,
      strlist("epacketDelete_attr1",
              "VID",
              "epacketDelete_attr5",
              "epacketDelete_attr7",
              "Score"),
      strlist("prov_attr1",
              "prov_attr2",
              "prov_attr3",
              "prov_attr4",
              "prov_attr5"));

  Delete(result);
}

void PktfwdProv::Prov_r1_1_ecaAdd(Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO("Prov_r1_1_ecaAdd triggered");

  Ptr<RelationBase> result;

  result = GetRelation(BESTPATH)->Join(
      packet,
      strlist("bestPath_attr2", "bestPath_attr1"),
      strlist("packet_attr2", "packet_attr1"));

  result->Assign(Assignor::New("PID1",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                Operation::New(RN_PLUS,
                                                                                               ValueExpr::New(StrValue::New("packet")),
                                                                                               VarExpr::New("packet_attr1")),
                                                                                VarExpr::New("packet_attr2")),
                                                                 VarExpr::New("packet_attr3")),
                                                  VarExpr::New("packet_attr4")))));

  result->Assign(Assignor::New("List",
                               FAppend::New(
                                   VarExpr::New("PID1"))));

  result->Assign(Assignor::New("PID2",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                Operation::New(RN_PLUS,
                                                                                               Operation::New(RN_PLUS,
                                                                                                              ValueExpr::New(StrValue::New("bestPath")),
                                                                                                              VarExpr::New("packet_attr1")),
                                                                                               VarExpr::New("packet_attr2")),
                                                                                VarExpr::New("bestPath_attr3")),
                                                                 VarExpr::New("bestPath_attr4")),
                                                  VarExpr::New("bestPath_attr5")))));

  result->Assign(Assignor::New("List2",
                               FAppend::New(
                                   VarExpr::New("PID2"))));

  result->Assign(Assignor::New("List",
                               FConcat::New(
                                   VarExpr::New("List"),
                                   VarExpr::New("List2"))));

  result->Assign(Assignor::New("RLOC",
                               VarExpr::New("packet_attr1")));

  result->Assign(Assignor::New("RWeight",
                               ValueExpr::New(RealValue::New(1))));

  result->Assign(Assignor::New("R",
                               ValueExpr::New(StrValue::New("r1"))));

  result->Assign(Assignor::New("RID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 VarExpr::New("R"),
                                                                 VarExpr::New("RLOC")),
                                                  VarExpr::New("List")))));

  result = result->Select(Selector::New(
      Operation::New(RN_NEQ,
                     VarExpr::New("packet_attr1"),
                     VarExpr::New("packet_attr2"))));

  result = result->Project(
      EPACKETTEMP,
      strlist("RLOC",
              "bestPath_attr5",
              "packet_attr2",
              "packet_attr3",
              "packet_attr4",
              "RID",
              "RWeight",
              "R",
              "List",
              "RLOC"),
      strlist("epacketTemp_attr1",
              "epacketTemp_attr2",
              "epacketTemp_attr3",
              "epacketTemp_attr4",
              "epacketTemp_attr5",
              "epacketTemp_attr6",
              "epacketTemp_attr7",
              "epacketTemp_attr8",
              "epacketTemp_attr9",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_r1_1_ecaDel(Ptr<Tuple> packetDelete)
{
  RAPIDNET_LOG_INFO("Prov_r1_1_ecaDel triggered");

  Ptr<RelationBase> result;

  result = GetRelation(BESTPATH)->Join(
      packetDelete,
      strlist("bestPath_attr2", "bestPath_attr1"),
      strlist("packetDelete_attr2", "packetDelete_attr1"));

  result->Assign(Assignor::New("PID1",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                Operation::New(RN_PLUS,
                                                                                               ValueExpr::New(StrValue::New("packet")),
                                                                                               VarExpr::New("packetDelete_attr1")),
                                                                                VarExpr::New("packetDelete_attr2")),
                                                                 VarExpr::New("packetDelete_attr3")),
                                                  VarExpr::New("packetDelete_attr4")))));

  result->Assign(Assignor::New("List",
                               FAppend::New(
                                   VarExpr::New("PID1"))));

  result->Assign(Assignor::New("PID2",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                Operation::New(RN_PLUS,
                                                                                               Operation::New(RN_PLUS,
                                                                                                              ValueExpr::New(StrValue::New("bestPath")),
                                                                                                              VarExpr::New("packetDelete_attr1")),
                                                                                               VarExpr::New("packetDelete_attr2")),
                                                                                VarExpr::New("bestPath_attr3")),
                                                                 VarExpr::New("bestPath_attr4")),
                                                  VarExpr::New("bestPath_attr5")))));

  result->Assign(Assignor::New("List2",
                               FAppend::New(
                                   VarExpr::New("PID2"))));

  result->Assign(Assignor::New("List",
                               FConcat::New(
                                   VarExpr::New("List"),
                                   VarExpr::New("List2"))));

  result->Assign(Assignor::New("RLOC",
                               VarExpr::New("packetDelete_attr1")));

  result->Assign(Assignor::New("RWeight",
                               ValueExpr::New(RealValue::New(1))));

  result->Assign(Assignor::New("R",
                               ValueExpr::New(StrValue::New("r1"))));

  result->Assign(Assignor::New("RID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 VarExpr::New("R"),
                                                                 VarExpr::New("RLOC")),
                                                  VarExpr::New("List")))));

  result = result->Select(Selector::New(
      Operation::New(RN_NEQ,
                     VarExpr::New("packetDelete_attr1"),
                     VarExpr::New("packetDelete_attr2"))));

  result = result->Project(
      EPACKETTEMPDELETE,
      strlist("RLOC",
              "bestPath_attr5",
              "packetDelete_attr2",
              "packetDelete_attr3",
              "packetDelete_attr4",
              "RID",
              "RWeight",
              "R",
              "List",
              "RLOC"),
      strlist("epacketTempDelete_attr1",
              "epacketTempDelete_attr2",
              "epacketTempDelete_attr3",
              "epacketTempDelete_attr4",
              "epacketTempDelete_attr5",
              "epacketTempDelete_attr6",
              "epacketTempDelete_attr7",
              "epacketTempDelete_attr8",
              "epacketTempDelete_attr9",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Prov_edb_1Eca1Ins(Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO("Prov_edb_1Eca1Ins triggered");

  Ptr<Tuple> result = link;

  result->Assign(Assignor::New("RLoc",
                               VarExpr::New("link_attr1")));

  result->Assign(Assignor::New("VID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                ValueExpr::New(StrValue::New("link")),
                                                                                VarExpr::New("link_attr1")),
                                                                 VarExpr::New("link_attr2")),
                                                  VarExpr::New("link_attr3")))));

  result->Assign(Assignor::New("RID",
                               VarExpr::New("VID")));

  result->Assign(Assignor::New("Score",
                               VarExpr::New("link_attr3")));

  result = result->Project(
      PROV,
      strlist("link_attr1",
              "VID",
              "RID",
              "RLoc",
              "Score"),
      strlist("prov_attr1",
              "prov_attr2",
              "prov_attr3",
              "prov_attr4",
              "prov_attr5"));

  Insert(result);
}

void PktfwdProv::Prov_edb_1Eca1Del(Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO("Prov_edb_1Eca1Del triggered");

  Ptr<Tuple> result = link;

  result->Assign(Assignor::New("RLoc",
                               VarExpr::New("link_attr1")));

  result->Assign(Assignor::New("VID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                ValueExpr::New(StrValue::New("link")),
                                                                                VarExpr::New("link_attr1")),
                                                                 VarExpr::New("link_attr2")),
                                                  VarExpr::New("link_attr3")))));

  result->Assign(Assignor::New("RID",
                               VarExpr::New("VID")));

  result->Assign(Assignor::New("Score",
                               VarExpr::New("link_attr3")));

  result = result->Project(
      PROV,
      strlist("link_attr1",
              "VID",
              "RID",
              "RLoc",
              "Score"),
      strlist("prov_attr1",
              "prov_attr2",
              "prov_attr3",
              "prov_attr4",
              "prov_attr5"));

  Delete(result);
}

void PktfwdProv::Prov_edb_2Eca1Ins(Ptr<Tuple> status)
{
  RAPIDNET_LOG_INFO("Prov_edb_2Eca1Ins triggered");

  Ptr<Tuple> result = status;

  result->Assign(Assignor::New("RLoc",
                               VarExpr::New("status_attr1")));

  result->Assign(Assignor::New("VID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  ValueExpr::New(StrValue::New("status")),
                                                  VarExpr::New("status_attr1")))));

  result->Assign(Assignor::New("RID",
                               VarExpr::New("VID")));

  result->Assign(Assignor::New("Score",
                               VarExpr::New("status_attr1")));

  result = result->Project(
      PROV,
      strlist("status_attr1",
              "VID",
              "RID",
              "RLoc",
              "Score"),
      strlist("prov_attr1",
              "prov_attr2",
              "prov_attr3",
              "prov_attr4",
              "prov_attr5"));

  Insert(result);
}

void PktfwdProv::Prov_edb_2Eca1Del(Ptr<Tuple> status)
{
  RAPIDNET_LOG_INFO("Prov_edb_2Eca1Del triggered");

  Ptr<Tuple> result = status;

  result->Assign(Assignor::New("RLoc",
                               VarExpr::New("status_attr1")));

  result->Assign(Assignor::New("VID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  ValueExpr::New(StrValue::New("status")),
                                                  VarExpr::New("status_attr1")))));

  result->Assign(Assignor::New("RID",
                               VarExpr::New("VID")));

  result->Assign(Assignor::New("Score",
                               VarExpr::New("status_attr1")));

  result = result->Project(
      PROV,
      strlist("status_attr1",
              "VID",
              "RID",
              "RLoc",
              "Score"),
      strlist("prov_attr1",
              "prov_attr2",
              "prov_attr3",
              "prov_attr4",
              "prov_attr5"));

  Delete(result);
}

void PktfwdProv::Prov_edb_3Eca1Ins(Ptr<Tuple> table)
{
  RAPIDNET_LOG_INFO("Prov_edb_3Eca1Ins triggered");

  Ptr<Tuple> result = table;

  result->Assign(Assignor::New("RLoc",
                               VarExpr::New("table_attr1")));

  result->Assign(Assignor::New("VID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                ValueExpr::New(StrValue::New("table")),
                                                                                VarExpr::New("table_attr1")),
                                                                 VarExpr::New("table_attr2")),
                                                  VarExpr::New("table_attr3")))));

  result->Assign(Assignor::New("RID",
                               VarExpr::New("VID")));

  result->Assign(Assignor::New("Score",
                               VarExpr::New("table_attr3")));

  result = result->Project(
      PROV,
      strlist("table_attr1",
              "VID",
              "RID",
              "RLoc",
              "Score"),
      strlist("prov_attr1",
              "prov_attr2",
              "prov_attr3",
              "prov_attr4",
              "prov_attr5"));

  Insert(result);
}

void PktfwdProv::Prov_edb_3Eca1Del(Ptr<Tuple> table)
{
  RAPIDNET_LOG_INFO("Prov_edb_3Eca1Del triggered");

  Ptr<Tuple> result = table;

  result->Assign(Assignor::New("RLoc",
                               VarExpr::New("table_attr1")));

  result->Assign(Assignor::New("VID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 Operation::New(RN_PLUS,
                                                                                ValueExpr::New(StrValue::New("table")),
                                                                                VarExpr::New("table_attr1")),
                                                                 VarExpr::New("table_attr2")),
                                                  VarExpr::New("table_attr3")))));

  result->Assign(Assignor::New("RID",
                               VarExpr::New("VID")));

  result->Assign(Assignor::New("Score",
                               VarExpr::New("table_attr3")));

  result = result->Project(
      PROV,
      strlist("table_attr1",
              "VID",
              "RID",
              "RLoc",
              "Score"),
      strlist("prov_attr1",
              "prov_attr2",
              "prov_attr3",
              "prov_attr4",
              "prov_attr5"));

  Delete(result);
}

void PktfwdProv::Edb1_eca(Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO("Edb1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(PROV)->Join(
      provQuery,
      strlist("prov_attr2", "prov_attr1"),
      strlist("provQuery_attr3", "provQuery_attr1"));

  result->Assign(Assignor::New("Prov",
                               FPEdb::New(
                                   VarExpr::New("provQuery_attr3"),
                                   VarExpr::New("provQuery_attr1"))));

  result = result->Select(Selector::New(
      Operation::New(RN_EQ,
                     VarExpr::New("prov_attr3"),
                     VarExpr::New("provQuery_attr3"))));

  result = result->Project(
      PRETURN,
      strlist("provQuery_attr4",
              "provQuery_attr2",
              "provQuery_attr3",
              "Prov",
              "provQuery_attr4"),
      strlist("pReturn_attr1",
              "pReturn_attr2",
              "pReturn_attr3",
              "pReturn_attr4",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Idb1_eca(Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO("Idb1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(PROV)->Join(
      provQuery,
      strlist("prov_attr2", "prov_attr1"),
      strlist("provQuery_attr3", "provQuery_attr1"));

  result = result->Select(Selector::New(
      Operation::New(RN_NEQ,
                     VarExpr::New("prov_attr3"),
                     VarExpr::New("provQuery_attr3"))));

  result = AggWrapList::New()->Compute(result, provQuery, "prov_attr3");

  result = result->Project(
      PQLIST,
      strlist("provQuery_attr1",
              "provQuery_attr2",
              "list"),
      strlist("pQList_attr1",
              "pQList_attr2",
              "pQList_attr3"));

  Insert(result);
}

void PktfwdProv::Idb2_eca(Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO("Idb2_eca triggered");

  Ptr<Tuple> result = provQuery;

  result->Assign(Assignor::New("Buf",
                               FEmpty::New()));

  result = result->Project(
      PRESULTTMP,
      strlist("provQuery_attr1",
              "provQuery_attr2",
              "provQuery_attr4",
              "provQuery_attr3",
              "Buf"),
      strlist("pResultTmp_attr1",
              "pResultTmp_attr2",
              "pResultTmp_attr3",
              "pResultTmp_attr4",
              "pResultTmp_attr5"));

  Insert(result);
}

void PktfwdProv::Idb3_eca(Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO("Idb3_eca triggered");

  Ptr<Tuple> result = provQuery;

  result->Assign(Assignor::New("N",
                               ValueExpr::New(Int32Value::New(1))));

  result = result->Project(
      PITERATE,
      strlist("provQuery_attr1",
              "provQuery_attr2",
              "N"),
      strlist("pIterate_attr1",
              "pIterate_attr2",
              "pIterate_attr3"));

  SendLocal(result);
}

void PktfwdProv::Idb4_eca(Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO("Idb4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(PQLIST)->Join(
      pIterate,
      strlist("pQList_attr2", "pQList_attr1"),
      strlist("pIterate_attr2", "pIterate_attr1"));

  result->Assign(Assignor::New("N",
                               Operation::New(RN_PLUS,
                                              VarExpr::New("pIterate_attr3"),
                                              ValueExpr::New(Int32Value::New(1)))));

  result = result->Select(Selector::New(
      Operation::New(RN_LT,
                     VarExpr::New("pIterate_attr3"),
                     FSize::New(
                         VarExpr::New("pQList_attr3")))));

  result = result->Project(
      PITERATE,
      strlist("pIterate_attr1",
              "pIterate_attr2",
              "N"),
      strlist("pIterate_attr1",
              "pIterate_attr2",
              "pIterate_attr3"));

  SendLocal(result);
}

void PktfwdProv::Idb5_eca(Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO("Idb5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(PQLIST)->Join(
      pIterate,
      strlist("pQList_attr2", "pQList_attr1"),
      strlist("pIterate_attr2", "pIterate_attr1"));

  result->Assign(Assignor::New("RID",
                               FItem::New(
                                   VarExpr::New("pQList_attr3"),
                                   VarExpr::New("pIterate_attr3"))));

  result->Assign(Assignor::New("NQID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 ValueExpr::New(StrValue::New("")),
                                                                 VarExpr::New("pIterate_attr2")),
                                                  VarExpr::New("RID")))));

  result = result->Select(Selector::New(
      Operation::New(RN_LTE,
                     VarExpr::New("pIterate_attr3"),
                     FSize::New(
                         VarExpr::New("pQList_attr3")))));

  result = result->Project(
      ERULEQUERY,
      strlist("pIterate_attr1",
              "NQID",
              "RID"),
      strlist("eRuleQuery_attr1",
              "eRuleQuery_attr2",
              "eRuleQuery_attr3"));

  SendLocal(result);
}

void PktfwdProv::Idb6_eca(Ptr<Tuple> eRuleQuery)
{
  RAPIDNET_LOG_INFO("Idb6_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(PROV)->Join(
      eRuleQuery,
      strlist("prov_attr3", "prov_attr1"),
      strlist("eRuleQuery_attr3", "eRuleQuery_attr1"));

  result = result->Project(
      RULEQUERY,
      strlist("prov_attr4",
              "eRuleQuery_attr2",
              "eRuleQuery_attr3",
              "eRuleQuery_attr1",
              "prov_attr4"),
      strlist("ruleQuery_attr1",
              "ruleQuery_attr2",
              "ruleQuery_attr3",
              "ruleQuery_attr4",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Idb7_eca(Ptr<Tuple> rReturn)
{
  RAPIDNET_LOG_INFO("Idb7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(PRESULTTMP)->Join(rReturn, strlist("pResultTmp_attr1"), strlist("rReturn_attr1"));

  result->Assign(Assignor::New("Buf2",
                               FAppend::New(
                                   VarExpr::New("rReturn_attr4"))));

  result->Assign(Assignor::New("Buf",
                               FConcat::New(
                                   VarExpr::New("pResultTmp_attr5"),
                                   VarExpr::New("Buf2"))));

  result = result->Select(Selector::New(
      Operation::New(RN_EQ,
                     VarExpr::New("rReturn_attr2"),
                     FSha1::New(
                         Operation::New(RN_PLUS,
                                        Operation::New(RN_PLUS,
                                                       ValueExpr::New(StrValue::New("")),
                                                       VarExpr::New("pResultTmp_attr2")),
                                        VarExpr::New("rReturn_attr3"))))));

  result = result->Project(
      PRESULTTMP,
      strlist("rReturn_attr1",
              "pResultTmp_attr2",
              "pResultTmp_attr3",
              "pResultTmp_attr4",
              "Buf"),
      strlist("pResultTmp_attr1",
              "pResultTmp_attr2",
              "pResultTmp_attr3",
              "pResultTmp_attr4",
              "pResultTmp_attr5"));

  Insert(result);
}

void PktfwdProv::Idb8Eca0Ins(Ptr<Tuple> pResultTmp)
{
  RAPIDNET_LOG_INFO("Idb8Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation(PQLIST)->Join(
      pResultTmp,
      strlist("pQList_attr2", "pQList_attr1"),
      strlist("pResultTmp_attr2", "pResultTmp_attr1"));

  result = result->Select(Selector::New(
      Operation::New(RN_EQ,
                     FSize::New(
                         VarExpr::New("pResultTmp_attr5")),
                     FSize::New(
                         VarExpr::New("pQList_attr3")))));

  result = result->Select(Selector::New(
      Operation::New(RN_NEQ,
                     FSize::New(
                         VarExpr::New("pResultTmp_attr5")),
                     ValueExpr::New(Int32Value::New(0)))));

  result = result->Project(
      EPRETURN,
      strlist("pResultTmp_attr1",
              "pResultTmp_attr2"),
      strlist("ePReturn_attr1",
              "ePReturn_attr2"));

  SendLocal(result);
}

void PktfwdProv::Idb8Eca1Ins(Ptr<Tuple> pQList)
{
  RAPIDNET_LOG_INFO("Idb8Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation(PRESULTTMP)->Join(pQList, strlist("pResultTmp_attr2", "pResultTmp_attr1"), strlist("pQList_attr2", "pQList_attr1"));

  result = result->Select(Selector::New(
      Operation::New(RN_EQ,
                     FSize::New(
                         VarExpr::New("pResultTmp_attr5")),
                     FSize::New(
                         VarExpr::New("pQList_attr3")))));

  result = result->Select(Selector::New(
      Operation::New(RN_NEQ,
                     FSize::New(
                         VarExpr::New("pResultTmp_attr5")),
                     ValueExpr::New(Int32Value::New(0)))));

  result = result->Project(
      EPRETURN,
      strlist("pQList_attr1",
              "pQList_attr2"),
      strlist("ePReturn_attr1",
              "ePReturn_attr2"));

  SendLocal(result);
}

void PktfwdProv::Idb9_eca(Ptr<Tuple> ePReturn)
{
  RAPIDNET_LOG_INFO("Idb9_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(PRESULTTMP)->Join(ePReturn, strlist("pResultTmp_attr2", "pResultTmp_attr1"), strlist("ePReturn_attr2", "ePReturn_attr1"));

  result->Assign(Assignor::New("Prov",
                               FPIdb::New(
                                   VarExpr::New("pResultTmp_attr5"),
                                   VarExpr::New("ePReturn_attr1"))));

  result = result->Project(
      PRETURN,
      strlist("pResultTmp_attr3",
              "ePReturn_attr2",
              "pResultTmp_attr4",
              "Prov",
              "pResultTmp_attr3"),
      strlist("pReturn_attr1",
              "pReturn_attr2",
              "pReturn_attr3",
              "pReturn_attr4",
              RN_DEST));

  Send(result);
}

void PktfwdProv::Rv1_eca(Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO("Rv1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(RULEEXEC)->Join(
      ruleQuery,
      strlist("ruleExec_attr2", "ruleExec_attr1"),
      strlist("ruleQuery_attr3", "ruleQuery_attr1"));

  result = result->Project(
      RQLIST,
      strlist("ruleQuery_attr1",
              "ruleQuery_attr2",
              "ruleExec_attr5"),
      strlist("rQList_attr1",
              "rQList_attr2",
              "rQList_attr3"));

  Insert(result);
}

void PktfwdProv::Rv2_eca(Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO("Rv2_eca triggered");

  Ptr<Tuple> result = ruleQuery;

  result->Assign(Assignor::New("Buf",
                               FEmpty::New()));

  result = result->Project(
      RRESULTTMP,
      strlist("ruleQuery_attr1",
              "ruleQuery_attr2",
              "ruleQuery_attr4",
              "ruleQuery_attr3",
              "Buf"),
      strlist("rResultTmp_attr1",
              "rResultTmp_attr2",
              "rResultTmp_attr3",
              "rResultTmp_attr4",
              "rResultTmp_attr5"));

  Insert(result);
}

void PktfwdProv::Rv3_eca(Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO("Rv3_eca triggered");

  Ptr<Tuple> result = ruleQuery;

  result->Assign(Assignor::New("N",
                               ValueExpr::New(Int32Value::New(1))));

  result = result->Project(
      RITERATE,
      strlist("ruleQuery_attr1",
              "ruleQuery_attr2",
              "N"),
      strlist("rIterate_attr1",
              "rIterate_attr2",
              "rIterate_attr3"));

  SendLocal(result);
}

void PktfwdProv::Rv4_eca(Ptr<Tuple> rIterate)
{
  RAPIDNET_LOG_INFO("Rv4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(RQLIST)->Join(
      rIterate,
      strlist("rQList_attr2", "rQList_attr1"),
      strlist("rIterate_attr2", "rIterate_attr1"));

  result->Assign(Assignor::New("N",
                               Operation::New(RN_PLUS,
                                              VarExpr::New("rIterate_attr3"),
                                              ValueExpr::New(Int32Value::New(1)))));

  result = result->Select(Selector::New(
      Operation::New(RN_LT,
                     VarExpr::New("rIterate_attr3"),
                     FSize::New(
                         VarExpr::New("rQList_attr3")))));

  result = result->Project(
      RITERATE,
      strlist("rIterate_attr1",
              "rIterate_attr2",
              "N"),
      strlist("rIterate_attr1",
              "rIterate_attr2",
              "rIterate_attr3"));

  SendLocal(result);
}

void PktfwdProv::Rv5_eca(Ptr<Tuple> rIterate)
{
  RAPIDNET_LOG_INFO("Rv5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(RQLIST)->Join(
      rIterate,
      strlist("rQList_attr2", "rQList_attr1"),
      strlist("rIterate_attr2", "rIterate_attr1"));

  result->Assign(Assignor::New("VID",
                               FItem::New(
                                   VarExpr::New("rQList_attr3"),
                                   VarExpr::New("rIterate_attr3"))));

  result->Assign(Assignor::New("NQID",
                               FSha1::New(
                                   Operation::New(RN_PLUS,
                                                  Operation::New(RN_PLUS,
                                                                 ValueExpr::New(StrValue::New("")),
                                                                 VarExpr::New("rIterate_attr2")),
                                                  VarExpr::New("VID")))));

  result = result->Project(
      EPROVQUERY,
      strlist("rIterate_attr1",
              "NQID",
              "VID"),
      strlist("eProvQuery_attr1",
              "eProvQuery_attr2",
              "eProvQuery_attr3"));

  SendLocal(result);
}

void PktfwdProv::Rv6_eca(Ptr<Tuple> eProvQuery)
{
  RAPIDNET_LOG_INFO("Rv6_eca triggered");

  Ptr<Tuple> result = eProvQuery;

  result->Assign(Assignor::New("$1",
                               VarExpr::New("eProvQuery_attr1")));

  result = result->Project(
      PROVQUERY,
      strlist("eProvQuery_attr1",
              "eProvQuery_attr2",
              "eProvQuery_attr3",
              "$1"),
      strlist("provQuery_attr1",
              "provQuery_attr2",
              "provQuery_attr3",
              "provQuery_attr4"));

  SendLocal(result);
}

void PktfwdProv::Rv7_eca(Ptr<Tuple> pReturn)
{
  RAPIDNET_LOG_INFO("Rv7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(RRESULTTMP)->Join(pReturn, strlist("rResultTmp_attr1"), strlist("pReturn_attr1"));

  result->Assign(Assignor::New("Buf2",
                               FAppend::New(
                                   VarExpr::New("pReturn_attr4"))));

  result->Assign(Assignor::New("Buf",
                               FConcat::New(
                                   VarExpr::New("rResultTmp_attr5"),
                                   VarExpr::New("Buf2"))));

  result = result->Select(Selector::New(
      Operation::New(RN_EQ,
                     VarExpr::New("pReturn_attr2"),
                     FSha1::New(
                         Operation::New(RN_PLUS,
                                        Operation::New(RN_PLUS,
                                                       ValueExpr::New(StrValue::New("")),
                                                       VarExpr::New("rResultTmp_attr2")),
                                        VarExpr::New("pReturn_attr3"))))));

  result = result->Project(
      RRESULTTMP,
      strlist("pReturn_attr1",
              "rResultTmp_attr2",
              "rResultTmp_attr3",
              "rResultTmp_attr4",
              "Buf"),
      strlist("rResultTmp_attr1",
              "rResultTmp_attr2",
              "rResultTmp_attr3",
              "rResultTmp_attr4",
              "rResultTmp_attr5"));

  Insert(result);
}

void PktfwdProv::Rv8Eca0Ins(Ptr<Tuple> rResultTmp)
{
  RAPIDNET_LOG_INFO("Rv8Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation(RQLIST)->Join(
      rResultTmp,
      strlist("rQList_attr2", "rQList_attr1"),
      strlist("rResultTmp_attr2", "rResultTmp_attr1"));

  result = result->Select(Selector::New(
      Operation::New(RN_EQ,
                     FSize::New(
                         VarExpr::New("rResultTmp_attr5")),
                     FSize::New(
                         VarExpr::New("rQList_attr3")))));

  result = result->Project(
      ERRETURN,
      strlist("rResultTmp_attr1",
              "rResultTmp_attr2"),
      strlist("eRReturn_attr1",
              "eRReturn_attr2"));

  SendLocal(result);
}

void PktfwdProv::Rv8Eca1Ins(Ptr<Tuple> rQList)
{
  RAPIDNET_LOG_INFO("Rv8Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation(RRESULTTMP)->Join(rQList, strlist("rResultTmp_attr2", "rResultTmp_attr1"), strlist("rQList_attr2", "rQList_attr1"));

  result = result->Select(Selector::New(
      Operation::New(RN_EQ,
                     FSize::New(
                         VarExpr::New("rResultTmp_attr5")),
                     FSize::New(
                         VarExpr::New("rQList_attr3")))));

  result = result->Project(
      ERRETURN,
      strlist("rQList_attr1",
              "rQList_attr2"),
      strlist("eRReturn_attr1",
              "eRReturn_attr2"));

  SendLocal(result);
}

void PktfwdProv::Rv9_eca(Ptr<Tuple> eRReturn)
{
  RAPIDNET_LOG_INFO("Rv9_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(RRESULTTMP)->Join(eRReturn, strlist("rResultTmp_attr2", "rResultTmp_attr1"), strlist("eRReturn_attr2", "eRReturn_attr1"));

  result = GetRelation(RULEEXEC)->Join(
      result,
      strlist("ruleExec_attr2", "ruleExec_attr1"),
      strlist("rResultTmp_attr4", "eRReturn_attr1"));

  result->Assign(Assignor::New("Prov",
                               FPRule::New(
                                   VarExpr::New("rResultTmp_attr5"),
                                   VarExpr::New("eRReturn_attr1"),
                                   VarExpr::New("ruleExec_attr4"),
                                   VarExpr::New("ruleExec_attr3"))));

  result = result->Project(
      RRETURN,
      strlist("rResultTmp_attr3",
              "eRReturn_attr2",
              "rResultTmp_attr4",
              "Prov",
              "rResultTmp_attr3"),
      strlist("rReturn_attr1",
              "rReturn_attr2",
              "rReturn_attr3",
              "rReturn_attr4",
              RN_DEST));

  Send(result);
}
