/* A RapidNet application. Generated by RapidNet compiler. */

#include "secure-pingpong.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::securepingpong;

const string SecurePingpong::EPING = "ePing";
const string SecurePingpong::EPINGPONGFINISH = "ePingPongFinish";
const string SecurePingpong::EPONG = "ePong";
const string SecurePingpong::PERIODIC = "periodic";
const string SecurePingpong::R1_ECAPERIODIC = "r1_ecaperiodic";
const string SecurePingpong::TLINK = "tLink";

NS_LOG_COMPONENT_DEFINE("SecurePingpong");
NS_OBJECT_ENSURE_REGISTERED(SecurePingpong);

TypeId
SecurePingpong::GetTypeId(void)
{
  static TypeId tid = TypeId("ns3::rapidnet::securepingpong::SecurePingpong")
                          .SetParent<RapidNetApplicationBase>()
                          .AddConstructor<SecurePingpong>();
  return tid;
}

SecurePingpong::SecurePingpong()
{
  NS_LOG_FUNCTION_NOARGS();
}

SecurePingpong::~SecurePingpong()
{
  NS_LOG_FUNCTION_NOARGS();
}

void SecurePingpong::DoDispose(void)
{
  NS_LOG_FUNCTION_NOARGS();

  RapidNetApplicationBase::DoDispose();
}

void SecurePingpong::StartApplication(void)
{
  NS_LOG_FUNCTION_NOARGS();

  RapidNetApplicationBase::StartApplication();
  SendlogInit();
  m_event_r1_ecaperiodic =
      Simulator::Schedule(Seconds(0), &SecurePingpong::R1_ecaperiodic, this);
  RAPIDNET_LOG_INFO("SecurePingpong Application Started");
}

void SecurePingpong::StopApplication()
{
  NS_LOG_FUNCTION_NOARGS();

  RapidNetApplicationBase::StopApplication();
  Simulator::Cancel(m_event_r1_ecaperiodic);
  RAPIDNET_LOG_INFO("SecurePingpong Application Stopped");
}

void SecurePingpong::InitDatabase()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys(TLINK, attrdeflist(
                                 attrdef("tLink_attr1", IPV4),
                                 attrdef("tLink_attr2", IPV4)));
}

void SecurePingpong::DemuxRecv(Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv(tuple);

  if (IsRecvEvent(tuple, R1_ECAPERIODIC))
  {
    R1_eca(tuple);
  }
  if (IsRecvEvent(tuple, EPING))
  {
    R2_eca(tuple);
  }
  if (IsRecvEvent(tuple, EPONG))
  {
    R3_eca(tuple);
  }
}

void SecurePingpong::R1_ecaperiodic()
{
  RAPIDNET_LOG_INFO("R1_ecaperiodic triggered");

  SendLocal(rtuple(R1_ECAPERIODIC, attrlist(
                                       attr("r1_ecaperiodic_attr1", Ipv4Value, GetAddress()),
                                       attr("r1_ecaperiodic_attr2", Int32Value, rand()))));

  m_event_r1_ecaperiodic = Simulator::Schedule(Seconds(1),
                                               &SecurePingpong::R1_ecaperiodic, this);
}

void SecurePingpong::R1_eca(Ptr<Tuple> r1_ecaperiodic)
{
  RAPIDNET_LOG_INFO("R1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(TLINK)->Join(
      r1_ecaperiodic,
      strlist("tLink_attr1"),
      strlist("r1_ecaperiodic_attr1"));

  result = result->Project(
      EPING,
      strlist("tLink_attr2",
              "r1_ecaperiodic_attr1",
              "tLink_attr2"),
      strlist("ePing_attr1",
              "ePing_attr2",
              RN_DEST));

  result = Encrypt(result, "ePing_attr1");
  Send(result);
}

void SecurePingpong::R2_eca(Ptr<Tuple> ePing)
{
  RAPIDNET_LOG_INFO("R2_eca triggered");

  Ptr<Tuple> result = ePing;

  result = result->Project(
      EPONG,
      strlist("ePing_attr2",
              "ePing_attr1",
              "ePing_attr2"),
      strlist("ePong_attr1",
              "ePong_attr2",
              RN_DEST));

  result = Encrypt(result, "ePong_attr1");
  Send(result);
}

void SecurePingpong::R3_eca(Ptr<Tuple> ePong)
{
  RAPIDNET_LOG_INFO("R3_eca triggered");

  Ptr<Tuple> result = ePong;

  result = result->Project(
      EPINGPONGFINISH,
      strlist("ePong_attr1"),
      strlist("ePingPongFinish_attr1"));

  SendLocal(result);
}
