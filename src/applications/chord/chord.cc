/* A RapidNet application. Generated by RapidNet compiler. */

#include "chord.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::chord;

const string Chord::BESTLOOKUPDIST = "bestLookupDist";
const string Chord::BESTSUCC = "bestSucc";
const string Chord::BESTSUCCDIST = "bestSuccDist";
const string Chord::C1_ECAPERIODIC = "c1_ecaperiodic";
const string Chord::CM1_ECAPERIODIC = "cm1_ecaperiodic";
const string Chord::DELETESUCC = "deleteSucc";
const string Chord::EAGERFINGER = "eagerFinger";
const string Chord::F1_ECAPERIODIC = "f1_ecaperiodic";
const string Chord::FFIX = "fFix";
const string Chord::FFIXEVENT = "fFixEvent";
const string Chord::FINGER = "finger";
const string Chord::FORWARDLOOKUP = "forwardLookup";
const string Chord::JOIN = "join";
const string Chord::JOINEVENT = "joinEvent";
const string Chord::JOINREQ = "joinReq";
const string Chord::LANDMARK = "landmark";
const string Chord::LOOKUP = "lookup";
const string Chord::LOOKUPRESULTS = "lookupResults";
const string Chord::NEWSUCCEVENT = "newSuccEvent";
const string Chord::NEXTFINGERFIX = "nextFingerFix";
const string Chord::NODE = "node";
const string Chord::NODEFAILURE = "nodeFailure";
const string Chord::NODE_INIT_ECAPERIODIC = "node_init_ecaperiodic";
const string Chord::PENDINGPING = "pendingPing";
const string Chord::PERIODIC = "periodic";
const string Chord::PINGREQ = "pingReq";
const string Chord::PINGRESP = "pingResp";
const string Chord::PP1_ECAPERIODIC = "pp1_ecaperiodic";
const string Chord::PP2_ECAPERIODIC = "pp2_ecaperiodic";
const string Chord::PP3_ECAPERIODIC = "pp3_ecaperiodic";
const string Chord::PP5_ECAPERIODIC = "pp5_ecaperiodic";
const string Chord::PRED = "pred";
const string Chord::SB0_ECAPERIODIC = "sb0_ecaperiodic";
const string Chord::SB1ASTABILIZEEVENTNODEBESTSUCCSI = "sb1AstabilizeEventnodebestSuccSI";
const string Chord::SB2LOCAL2SUCCEVICTPOLICYSEND = "sb2Local2succEvictPolicysend";
const string Chord::SB2STABILIZEEVENTNODESUCCEVICTPOLICYSI = "sb2stabilizeEventnodesuccEvictPolicySI";
const string Chord::SB3STABILIZEEVENTNODESUCCEVICTPOLICYSI = "sb3stabilizeEventnodesuccEvictPolicySI";
const string Chord::STABILIZEEVENT = "stabilizeEvent";
const string Chord::SUCCEVICTPOLICY = "succEvictPolicy";
const string Chord::SUCCEVICTPOLICYEVENT = "succEvictPolicyEvent";
const string Chord::UNIQUEFINGER = "uniqueFinger";

NS_LOG_COMPONENT_DEFINE("Chord");
NS_OBJECT_ENSURE_REGISTERED(Chord);

TypeId
Chord::GetTypeId(void)
{
  static TypeId tid = TypeId("ns3::rapidnet::chord::Chord")
                          .SetParent<RapidNetApplicationBase>()
                          .AddConstructor<Chord>();
  return tid;
}

Chord::Chord()
{
  NS_LOG_FUNCTION_NOARGS();
}

Chord::~Chord()
{
  NS_LOG_FUNCTION_NOARGS();
}

void Chord::DoDispose(void)
{
  NS_LOG_FUNCTION_NOARGS();

  RapidNetApplicationBase::DoDispose();
}

void Chord::StartApplication(void)
{
  NS_LOG_FUNCTION_NOARGS();

  RapidNetApplicationBase::StartApplication();
  m_event_node_init_ecaperiodic =
      Simulator::Schedule(Seconds(0), &Chord::Node_init_ecaperiodic, this);
  m_event_f1_ecaperiodic =
      Simulator::Schedule(Seconds(10 + (drand48() * 30)), &Chord::F1_ecaperiodic, this);
  m_event_c1_ecaperiodic =
      Simulator::Schedule(Seconds(0), &Chord::C1_ecaperiodic, this);
  m_event_sb0_ecaperiodic =
      Simulator::Schedule(Seconds(0 + (drand48() * 30)), &Chord::Sb0_ecaperiodic, this);
  m_event_pp1_ecaperiodic =
      Simulator::Schedule(Seconds(0), &Chord::Pp1_ecaperiodic, this);
  m_event_pp2_ecaperiodic =
      Simulator::Schedule(Seconds(0), &Chord::Pp2_ecaperiodic, this);
  m_event_pp3_ecaperiodic =
      Simulator::Schedule(Seconds(0), &Chord::Pp3_ecaperiodic, this);
  m_event_pp5_ecaperiodic =
      Simulator::Schedule(Seconds(0), &Chord::Pp5_ecaperiodic, this);
  m_event_cm1_ecaperiodic =
      Simulator::Schedule(Seconds(0), &Chord::Cm1_ecaperiodic, this);
  m_count_node_init_ecaperiodic = 0;
  m_count_c1_ecaperiodic = 0;
  RAPIDNET_LOG_INFO("Chord Application Started");
}

void Chord::StopApplication()
{
  NS_LOG_FUNCTION_NOARGS();

  RapidNetApplicationBase::StopApplication();
  Simulator::Cancel(m_event_node_init_ecaperiodic);
  Simulator::Cancel(m_event_f1_ecaperiodic);
  Simulator::Cancel(m_event_c1_ecaperiodic);
  Simulator::Cancel(m_event_sb0_ecaperiodic);
  Simulator::Cancel(m_event_pp1_ecaperiodic);
  Simulator::Cancel(m_event_pp2_ecaperiodic);
  Simulator::Cancel(m_event_pp3_ecaperiodic);
  Simulator::Cancel(m_event_pp5_ecaperiodic);
  Simulator::Cancel(m_event_cm1_ecaperiodic);
  RAPIDNET_LOG_INFO("Chord Application Stopped");
}

void Chord::InitDatabase()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys(BESTSUCC, attrdeflist(
                                    attrdef("bestSucc_attr1", IPV4)));

  AddRelationWithKeys(FFIX, attrdeflist(attrdef("fFix_attr2", INT32)),
                      Seconds(180));

  AddRelationWithKeys(FINGER, attrdeflist(
                                  attrdef("finger_attr2", INT32)));

  AddRelationWithKeys(JOIN, attrdeflist(attrdef("join_attr2", INT32)),
                      Seconds(30));

  AddRelationWithKeys(LANDMARK, attrdeflist(
                                    attrdef("landmark_attr1", IPV4)));

  AddRelationWithKeys(NEXTFINGERFIX, attrdeflist(attrdef("nextFingerFix_attr1", IPV4)),
                      Seconds(180));

  AddRelationWithKeys(NODE, attrdeflist(
                                attrdef("node_attr1", IPV4)));

  AddRelationWithKeys(PENDINGPING, attrdeflist(
                                       attrdef("pendingPing_attr3", STR)));

  AddRelationWithKeys(PRED, attrdeflist(
                                attrdef("pred_attr1", IPV4)));

  AddRelationWithKeys(SUCCEVICTPOLICY, attrdeflist(
                                           attrdef("succEvictPolicy_attr3", ID)));

  AddRelationWithKeys(UNIQUEFINGER, attrdeflist(attrdef("uniqueFinger_attr2", IPV4)),
                      Seconds(180));

  m_aggr_bestlookupdistMinD = AggWrap::New<AggWrapMin>(
      attrdeflist(
          attrdeftype("bestLookupDist_attr1", ANYTYPE),
          attrdeftype("bestLookupDist_attr2", ANYTYPE),
          attrdeftype("bestLookupDist_attr3", ANYTYPE),
          attrdeftype("bestLookupDist_attr4", ANYTYPE),
          attrdeftype("bestLookupDist_attr5", ANYTYPE)),
      5);

  m_aggr_forwardlookupMinBI = AggWrap::New<AggWrapMin>(
      attrdeflist(
          attrdeftype("forwardLookup_attr1", ANYTYPE),
          attrdeftype("forwardLookup_attr2", ANYTYPE),
          attrdeftype("forwardLookup_attr3", ANYTYPE),
          attrdeftype("forwardLookup_attr4", ANYTYPE),
          attrdeftype("forwardLookup_attr5", ANYTYPE)),
      2);

  m_aggr_bestsuccdistMinD = AggWrap::New<AggWrapMin>(
      attrdeflist(
          attrdeftype("bestSuccDist_attr1", ANYTYPE),
          attrdeftype("bestSuccDist_attr2", ANYTYPE)),
      2);
}

void Chord::DemuxRecv(Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv(tuple);

  if (IsRecvEvent(tuple, NODE_INIT_ECAPERIODIC))
  {
    Node_init_eca(tuple);
  }
  if (IsRecvEvent(tuple, LOOKUP))
  {
    L1_eca(tuple);
  }
  if (IsRecvEvent(tuple, LOOKUP))
  {
    L2_eca(tuple);
  }
  if (IsRecvEvent(tuple, BESTLOOKUPDIST))
  {
    L3_eca(tuple);
  }
  if (IsRecvEvent(tuple, FORWARDLOOKUP))
  {
    L4_eca(tuple);
  }
  if (IsInsertEvent(tuple, SUCCEVICTPOLICY))
  {
    N0Eca0Ins(tuple);
  }
  if (IsRecvEvent(tuple, DELETESUCC))
  {
    N2_eca(tuple);
  }
  if (IsRecvEvent(tuple, NEWSUCCEVENT))
  {
    N1_eca(tuple);
  }
  if (IsRecvEvent(tuple, BESTSUCCDIST))
  {
    N3_eca(tuple);
  }
  if (IsInsertEvent(tuple, BESTSUCC))
  {
    N4Eca1Ins(tuple);
  }
  if (IsDeleteEvent(tuple, BESTSUCC))
  {
    N4Eca1Del(tuple);
  }
  if (IsRecvEvent(tuple, F1_ECAPERIODIC))
  {
    F1_eca(tuple);
  }
  if (IsInsertEvent(tuple, FFIX))
  {
    F2Eca0Ins(tuple);
  }
  if (IsRefreshEvent(tuple, FFIX))
  {
    F2Eca0Ref(tuple);
  }
  if (IsRecvEvent(tuple, FFIXEVENT))
  {
    F3_eca(tuple);
  }
  if (IsRecvEvent(tuple, LOOKUPRESULTS))
  {
    F4_eca(tuple);
  }
  if (IsRecvEvent(tuple, EAGERFINGER))
  {
    F5_eca(tuple);
  }
  if (IsRecvEvent(tuple, EAGERFINGER))
  {
    F6_eca(tuple);
  }
  if (IsRecvEvent(tuple, EAGERFINGER))
  {
    F7_eca(tuple);
  }
  if (IsRecvEvent(tuple, EAGERFINGER))
  {
    F8_eca(tuple);
  }
  if (IsRecvEvent(tuple, EAGERFINGER))
  {
    F9_eca(tuple);
  }
  if (IsInsertEvent(tuple, FINGER))
  {
    F10Eca0Ins(tuple);
  }
  if (IsRecvEvent(tuple, C1_ECAPERIODIC))
  {
    C1_eca(tuple);
  }
  if (IsRecvEvent(tuple, JOINEVENT))
  {
    C2_eca(tuple);
  }
  if (IsRecvEvent(tuple, JOINEVENT))
  {
    C3_eca(tuple);
  }
  if (IsRecvEvent(tuple, JOINEVENT))
  {
    C4_eca(tuple);
  }
  if (IsRecvEvent(tuple, JOINREQ))
  {
    C5_eca(tuple);
  }
  if (IsRecvEvent(tuple, LOOKUPRESULTS))
  {
    C6_eca(tuple);
  }
  if (IsRecvEvent(tuple, SB0_ECAPERIODIC))
  {
    Sb0_eca(tuple);
  }
  if (IsRecvEvent(tuple, STABILIZEEVENT))
  {
    Sb1ALocal1_eca(tuple);
  }
  if (IsRecvEvent(tuple, SB1ASTABILIZEEVENTNODEBESTSUCCSI))
  {
    Sb1ALocal2_eca(tuple);
  }
  if (IsRecvEvent(tuple, SUCCEVICTPOLICYEVENT))
  {
    Sb1B_eca(tuple);
  }
  if (IsRecvEvent(tuple, STABILIZEEVENT))
  {
    Sb2Local1_eca(tuple);
  }
  if (IsRecvEvent(tuple, SB2LOCAL2SUCCEVICTPOLICYSEND))
  {
    Sb2Local2ECAMat(tuple);
  }
  if (IsRecvEvent(tuple, SB2STABILIZEEVENTNODESUCCEVICTPOLICYSI))
  {
    Sb2Local2_eca(tuple);
  }
  if (IsRecvEvent(tuple, STABILIZEEVENT))
  {
    Sb3Local1_eca(tuple);
  }
  if (IsRecvEvent(tuple, SB3STABILIZEEVENTNODESUCCEVICTPOLICYSI))
  {
    Sb3Local2_eca(tuple);
  }
  if (IsRecvEvent(tuple, PP1_ECAPERIODIC))
  {
    Pp1_eca(tuple);
  }
  if (IsRecvEvent(tuple, PP2_ECAPERIODIC))
  {
    Pp2_eca(tuple);
  }
  if (IsRecvEvent(tuple, PP3_ECAPERIODIC))
  {
    Pp3_eca(tuple);
  }
  if (IsRecvEvent(tuple, PINGREQ))
  {
    Pp4_eca(tuple);
  }
  if (IsRecvEvent(tuple, PP5_ECAPERIODIC))
  {
    Pp5_eca(tuple);
  }
  if (IsRecvEvent(tuple, PINGRESP))
  {
    Pp6_eca(tuple);
  }
  if (IsRecvEvent(tuple, CM1_ECAPERIODIC))
  {
    Cm1_eca(tuple);
  }
  if (IsRecvEvent(tuple, NODEFAILURE))
  {
    Cm1a_eca(tuple);
  }
  if (IsRecvEvent(tuple, NODEFAILURE))
  {
    Cm2a_eca(tuple);
  }
  if (IsRecvEvent(tuple, DELETESUCC))
  {
    Cm2b_eca(tuple);
  }
  if (IsRecvEvent(tuple, NODEFAILURE))
  {
    Cm3_eca(tuple);
  }
  if (IsRecvEvent(tuple, NODEFAILURE))
  {
    Cm4_eca(tuple);
  }
  if (IsRecvEvent(tuple, NODEFAILURE))
  {
    Cm6_eca(tuple);
  }
}

void Chord::Node_init_ecaperiodic()
{
  RAPIDNET_LOG_INFO("Node_init_ecaperiodic triggered");

  SendLocal(rtuple(NODE_INIT_ECAPERIODIC, attrlist(
                                              attr("node_init_ecaperiodic_attr1", Ipv4Value, GetAddress()),
                                              attr("node_init_ecaperiodic_attr2", Int32Value, rand()))));

  if (++m_count_node_init_ecaperiodic < 1)
  {
    m_event_node_init_ecaperiodic = Simulator::Schedule(Seconds(0),
                                                        &Chord::Node_init_ecaperiodic, this);
  }
}

void Chord::Node_init_eca(Ptr<Tuple> node_init_ecaperiodic)
{
  RAPIDNET_LOG_INFO("Node_init_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(LANDMARK)->Join(
      node_init_ecaperiodic,
      strlist("landmark_attr1"),
      strlist("node_init_ecaperiodic_attr1"));

  result->Assign(Assignor::New("ID",
                               FSha1::New(
                                   VarExpr::New("node_init_ecaperiodic_attr1"))));

  result = result->Project(
      NODE,
      strlist("node_init_ecaperiodic_attr1",
              "ID"),
      strlist("node_attr1",
              "node_attr2"));

  Insert(result);
}

void Chord::L1_eca(Ptr<Tuple> lookup)
{
  RAPIDNET_LOG_INFO("L1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(NODE)->Join(
      lookup,
      strlist("node_attr1"),
      strlist("lookup_attr1"));

  result = GetRelation(BESTSUCC)->Join(
      result,
      strlist("bestSucc_attr1"),
      strlist("lookup_attr1"));

  result = result->Select(Selector::New(
      RangeExpr::New(RangeExpr::RANGEOC,
                     VarExpr::New("lookup_attr2"),
                     VarExpr::New("node_attr2"),
                     VarExpr::New("bestSucc_attr2"))));

  result = result->Project(
      LOOKUPRESULTS,
      strlist("lookup_attr3",
              "lookup_attr2",
              "bestSucc_attr2",
              "bestSucc_attr3",
              "lookup_attr4",
              "lookup_attr3"),
      strlist("lookupResults_attr1",
              "lookupResults_attr2",
              "lookupResults_attr3",
              "lookupResults_attr4",
              "lookupResults_attr5",
              RN_DEST));

  Send(result);
}

void Chord::L2_eca(Ptr<Tuple> lookup)
{
  RAPIDNET_LOG_INFO("L2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(NODE)->Join(
      lookup,
      strlist("node_attr1"),
      strlist("lookup_attr1"));

  result = GetRelation(FINGER)->Join(
      result,
      strlist("finger_attr1"),
      strlist("lookup_attr1"));

  result->Assign(Assignor::New("D",
                               Operation::New(RN_MINUS,
                                              Operation::New(RN_MINUS,
                                                             VarExpr::New("lookup_attr2"),
                                                             VarExpr::New("finger_attr3")),
                                              ValueExpr::New(Int32Value::New(1)))));

  result = result->Select(Selector::New(
      RangeExpr::New(RangeExpr::RANGEOO,
                     VarExpr::New("finger_attr3"),
                     VarExpr::New("node_attr2"),
                     VarExpr::New("lookup_attr2"))));

  result = result->Project(
      BESTLOOKUPDIST,
      strlist("lookup_attr1",
              "lookup_attr2",
              "lookup_attr3",
              "lookup_attr4",
              "D"),
      strlist("bestLookupDist_attr1",
              "bestLookupDist_attr2",
              "bestLookupDist_attr3",
              "bestLookupDist_attr4",
              "bestLookupDist_attr5"));

  result = m_aggr_bestlookupdistMinD->Compute(result);

  SendLocal(result);
}

void Chord::L3_eca(Ptr<Tuple> bestLookupDist)
{
  RAPIDNET_LOG_INFO("L3_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(NODE)->Join(
      bestLookupDist,
      strlist("node_attr1"),
      strlist("bestLookupDist_attr1"));

  result = GetRelation(FINGER)->Join(
      result,
      strlist("finger_attr1"),
      strlist("bestLookupDist_attr1"));

  result = result->Select(Selector::New(
      Operation::New(RN_EQ,
                     VarExpr::New("bestLookupDist_attr5"),
                     Operation::New(RN_MINUS,
                                    Operation::New(RN_MINUS,
                                                   VarExpr::New("bestLookupDist_attr2"),
                                                   VarExpr::New("finger_attr3")),
                                    ValueExpr::New(Int32Value::New(1))))));

  result = result->Select(Selector::New(
      RangeExpr::New(RangeExpr::RANGEOO,
                     VarExpr::New("finger_attr3"),
                     VarExpr::New("node_attr2"),
                     VarExpr::New("bestLookupDist_attr2"))));

  result = result->Project(
      FORWARDLOOKUP,
      strlist("bestLookupDist_attr1",
              "finger_attr4",
              "bestLookupDist_attr2",
              "bestLookupDist_attr3",
              "bestLookupDist_attr4"),
      strlist("forwardLookup_attr1",
              "forwardLookup_attr2",
              "forwardLookup_attr3",
              "forwardLookup_attr4",
              "forwardLookup_attr5"));

  result = m_aggr_forwardlookupMinBI->Compute(result);

  SendLocal(result);
}

void Chord::L4_eca(Ptr<Tuple> forwardLookup)
{
  RAPIDNET_LOG_INFO("L4_eca triggered");

  Ptr<Tuple> result = forwardLookup;

  result = result->Select(Selector::New(
      Operation::New(RN_NEQ,
                     FTypeOf::New(
                         VarExpr::New("forwardLookup_attr2")),
                     ValueExpr::New(StrValue::New("null")))));

  result = result->Project(
      LOOKUP,
      strlist("forwardLookup_attr2",
              "forwardLookup_attr3",
              "forwardLookup_attr4",
              "forwardLookup_attr5",
              "forwardLookup_attr2"),
      strlist("lookup_attr1",
              "lookup_attr2",
              "lookup_attr3",
              "lookup_attr4",
              RN_DEST));

  Send(result);
}

void Chord::N0Eca0Ins(Ptr<Tuple> succEvictPolicy)
{
  RAPIDNET_LOG_INFO("N0Eca0Ins triggered");

  Ptr<Tuple> result = succEvictPolicy;

  result = result->Project(
      NEWSUCCEVENT,
      strlist("succEvictPolicy_attr1"),
      strlist("newSuccEvent_attr1"));

  SendLocal(result);
}

void Chord::N2_eca(Ptr<Tuple> deleteSucc)
{
  RAPIDNET_LOG_INFO("N2_eca triggered");

  Ptr<Tuple> result = deleteSucc;

  result = result->Project(
      NEWSUCCEVENT,
      strlist("deleteSucc_attr1"),
      strlist("newSuccEvent_attr1"));

  SendLocal(result);
}

void Chord::N1_eca(Ptr<Tuple> newSuccEvent)
{
  RAPIDNET_LOG_INFO("N1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(SUCCEVICTPOLICY)->Join(newSuccEvent, strlist("succEvictPolicy_attr1"), strlist("newSuccEvent_attr1"));

  result = result->Project(
      BESTSUCCDIST,
      strlist("newSuccEvent_attr1",
              "succEvictPolicy_attr2"),
      strlist("bestSuccDist_attr1",
              "bestSuccDist_attr2"));

  result = m_aggr_bestsuccdistMinD->Compute(result);

  SendLocal(result);
}

void Chord::N3_eca(Ptr<Tuple> bestSuccDist)
{
  RAPIDNET_LOG_INFO("N3_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(SUCCEVICTPOLICY)->Join(bestSuccDist, strlist("succEvictPolicy_attr2", "succEvictPolicy_attr1"), strlist("bestSuccDist_attr2", "bestSuccDist_attr1"));

  result = result->Project(
      BESTSUCC,
      strlist("bestSuccDist_attr1",
              "succEvictPolicy_attr3",
              "succEvictPolicy_attr4"),
      strlist("bestSucc_attr1",
              "bestSucc_attr2",
              "bestSucc_attr3"));

  Insert(result);
}

void Chord::N4Eca1Ins(Ptr<Tuple> bestSucc)
{
  RAPIDNET_LOG_INFO("N4Eca1Ins triggered");

  Ptr<Tuple> result = bestSucc;

  result->Assign(Assignor::New("$1",
                               ValueExpr::New(Int32Value::New(0))));

  result = result->Project(
      FINGER,
      strlist("bestSucc_attr1",
              "$1",
              "bestSucc_attr2",
              "bestSucc_attr3"),
      strlist("finger_attr1",
              "finger_attr2",
              "finger_attr3",
              "finger_attr4"));

  Insert(result);
}

void Chord::N4Eca1Del(Ptr<Tuple> bestSucc)
{
  RAPIDNET_LOG_INFO("N4Eca1Del triggered");

  Ptr<Tuple> result = bestSucc;

  result->Assign(Assignor::New("$1",
                               ValueExpr::New(Int32Value::New(0))));

  result = result->Project(
      FINGER,
      strlist("bestSucc_attr1",
              "$1",
              "bestSucc_attr2",
              "bestSucc_attr3"),
      strlist("finger_attr1",
              "finger_attr2",
              "finger_attr3",
              "finger_attr4"));

  Delete(result);
}

void Chord::F1_ecaperiodic()
{
  RAPIDNET_LOG_INFO("F1_ecaperiodic triggered");

  SendLocal(rtuple(F1_ECAPERIODIC, attrlist(
                                       attr("f1_ecaperiodic_attr1", Ipv4Value, GetAddress()),
                                       attr("f1_ecaperiodic_attr2", Int32Value, rand()))));

  m_event_f1_ecaperiodic = Simulator::Schedule(Seconds(50),
                                               &Chord::F1_ecaperiodic, this);
}

void Chord::F1_eca(Ptr<Tuple> f1_ecaperiodic)
{
  RAPIDNET_LOG_INFO("F1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(NEXTFINGERFIX)->Join(f1_ecaperiodic, strlist("nextFingerFix_attr1"), strlist("f1_ecaperiodic_attr1"));

  result = result->Project(
      FFIX,
      strlist("f1_ecaperiodic_attr1",
              "f1_ecaperiodic_attr2",
              "nextFingerFix_attr2"),
      strlist("fFix_attr1",
              "fFix_attr2",
              "fFix_attr3"));

  Insert(result);
}

void Chord::F2Eca0Ins(Ptr<Tuple> fFix)
{
  RAPIDNET_LOG_INFO("F2Eca0Ins triggered");

  Ptr<Tuple> result = fFix;

  result = result->Project(
      FFIXEVENT,
      strlist("fFix_attr1",
              "fFix_attr2",
              "fFix_attr3"),
      strlist("fFixEvent_attr1",
              "fFixEvent_attr2",
              "fFixEvent_attr3"));

  SendLocal(result);
}

void Chord::F2Eca0Ref(Ptr<Tuple> fFix)
{
  RAPIDNET_LOG_INFO("F2Eca0Ref triggered");

  Ptr<Tuple> result = fFix;

  result = result->Project(
      FFIXEVENT,
      strlist("fFix_attr1",
              "fFix_attr2",
              "fFix_attr3"),
      strlist("fFixEvent_attr1",
              "fFixEvent_attr2",
              "fFixEvent_attr3"));

  SendLocal(result);
}

void Chord::F3_eca(Ptr<Tuple> fFixEvent)
{
  RAPIDNET_LOG_INFO("F3_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(NODE)->Join(
      fFixEvent,
      strlist("node_attr1"),
      strlist("fFixEvent_attr1"));

  result->Assign(Assignor::New("$1",
                               VarExpr::New("fFixEvent_attr1")));

  result->Assign(Assignor::New("K",
                               Operation::New(RN_PLUS,
                                              Operation::New(RN_LSHIFT,
                                                             ValueExpr::New(IdValue::New("0000000000000000000000000000000000000001", 16)),
                                                             VarExpr::New("fFixEvent_attr3")),
                                              VarExpr::New("node_attr2"))));

  result = result->Project(
      LOOKUP,
      strlist("fFixEvent_attr1",
              "K",
              "$1",
              "fFixEvent_attr2"),
      strlist("lookup_attr1",
              "lookup_attr2",
              "lookup_attr3",
              "lookup_attr4"));

  SendLocal(result);
}

void Chord::F4_eca(Ptr<Tuple> lookupResults)
{
  RAPIDNET_LOG_INFO("F4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(FFIX)->Join(
      lookupResults,
      strlist("fFix_attr2", "fFix_attr1"),
      strlist("lookupResults_attr5", "lookupResults_attr1"));

  result = result->Project(
      EAGERFINGER,
      strlist("lookupResults_attr1",
              "fFix_attr3",
              "lookupResults_attr3",
              "lookupResults_attr4"),
      strlist("eagerFinger_attr1",
              "eagerFinger_attr2",
              "eagerFinger_attr3",
              "eagerFinger_attr4"));

  SendLocal(result);
}

void Chord::F5_eca(Ptr<Tuple> eagerFinger)
{
  RAPIDNET_LOG_INFO("F5_eca triggered");

  Ptr<Tuple> result = eagerFinger;

  result = result->Project(
      FINGER,
      strlist("eagerFinger_attr1",
              "eagerFinger_attr2",
              "eagerFinger_attr3",
              "eagerFinger_attr4"),
      strlist("finger_attr1",
              "finger_attr2",
              "finger_attr3",
              "finger_attr4"));

  Insert(result);
}

void Chord::F6_eca(Ptr<Tuple> eagerFinger)
{
  RAPIDNET_LOG_INFO("F6_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(NODE)->Join(
      eagerFinger,
      strlist("node_attr1"),
      strlist("eagerFinger_attr1"));

  result->Assign(Assignor::New("I",
                               Operation::New(RN_PLUS,
                                              VarExpr::New("eagerFinger_attr2"),
                                              ValueExpr::New(Int32Value::New(1)))));

  result->Assign(Assignor::New("K",
                               Operation::New(RN_PLUS,
                                              Operation::New(RN_LSHIFT,
                                                             ValueExpr::New(IdValue::New("0000000000000000000000000000000000000001", 16)),
                                                             VarExpr::New("I")),
                                              VarExpr::New("node_attr2"))));

  result = result->Select(Selector::New(
      RangeExpr::New(RangeExpr::RANGEOO,
                     VarExpr::New("K"),
                     VarExpr::New("node_attr2"),
                     VarExpr::New("eagerFinger_attr3"))));

  result = result->Select(Selector::New(
      Operation::New(RN_NEQ,
                     VarExpr::New("eagerFinger_attr4"),
                     VarExpr::New("eagerFinger_attr1"))));

  result = result->Project(
      EAGERFINGER,
      strlist("eagerFinger_attr1",
              "I",
              "eagerFinger_attr3",
              "eagerFinger_attr4"),
      strlist("eagerFinger_attr1",
              "eagerFinger_attr2",
              "eagerFinger_attr3",
              "eagerFinger_attr4"));

  SendLocal(result);
}

void Chord::F7_eca(Ptr<Tuple> eagerFinger)
{
  RAPIDNET_LOG_INFO("F7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(FFIX)->Join(
      eagerFinger,
      strlist("fFix_attr1"),
      strlist("eagerFinger_attr1"));

  result = result->Select(Selector::New(
      Operation::New(RN_GT,
                     VarExpr::New("eagerFinger_attr2"),
                     ValueExpr::New(Int32Value::New(0)))));

  result = result->Select(Selector::New(
      Operation::New(RN_EQ,
                     VarExpr::New("fFix_attr3"),
                     Operation::New(RN_MINUS,
                                    VarExpr::New("eagerFinger_attr2"),
                                    ValueExpr::New(Int32Value::New(1))))));

  result = result->Project(
      FFIX,
      strlist("eagerFinger_attr1",
              "fFix_attr2",
              "fFix_attr3"),
      strlist("fFix_attr1",
              "fFix_attr2",
              "fFix_attr3"));

  Delete(result);
}

void Chord::F8_eca(Ptr<Tuple> eagerFinger)
{
  RAPIDNET_LOG_INFO("F8_eca triggered");

  Ptr<Tuple> result = eagerFinger;

  result->Assign(Assignor::New("$1",
                               ValueExpr::New(Int32Value::New(0))));

  result = result->Select(Selector::New(
      Operation::New(RN_OR,
                     Operation::New(RN_EQ,
                                    VarExpr::New("eagerFinger_attr2"),
                                    ValueExpr::New(Int32Value::New(159))),
                     Operation::New(RN_EQ,
                                    VarExpr::New("eagerFinger_attr4"),
                                    VarExpr::New("eagerFinger_attr1")))));

  result = result->Project(
      NEXTFINGERFIX,
      strlist("eagerFinger_attr1",
              "$1"),
      strlist("nextFingerFix_attr1",
              "nextFingerFix_attr2"));

  Insert(result);
}

void Chord::F9_eca(Ptr<Tuple> eagerFinger)
{
  RAPIDNET_LOG_INFO("F9_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(NODE)->Join(
      eagerFinger,
      strlist("node_attr1"),
      strlist("eagerFinger_attr1"));

  result->Assign(Assignor::New("I",
                               Operation::New(RN_PLUS,
                                              VarExpr::New("eagerFinger_attr2"),
                                              ValueExpr::New(Int32Value::New(1)))));

  result->Assign(Assignor::New("K",
                               Operation::New(RN_PLUS,
                                              Operation::New(RN_LSHIFT,
                                                             ValueExpr::New(IdValue::New("0000000000000000000000000000000000000001", 16)),
                                                             VarExpr::New("I")),
                                              VarExpr::New("node_attr2"))));

  result = result->Select(Selector::New(
      RangeExpr::New(RangeExpr::RANGEOO,
                     VarExpr::New("K"),
                     VarExpr::New("eagerFinger_attr3"),
                     VarExpr::New("node_attr2"))));

  result = result->Select(Selector::New(
      Operation::New(RN_NEQ,
                     VarExpr::New("eagerFinger_attr1"),
                     VarExpr::New("eagerFinger_attr4"))));

  result = result->Project(
      NEXTFINGERFIX,
      strlist("eagerFinger_attr1",
              "I"),
      strlist("nextFingerFix_attr1",
              "nextFingerFix_attr2"));

  Insert(result);
}

void Chord::F10Eca0Ins(Ptr<Tuple> finger)
{
  RAPIDNET_LOG_INFO("F10Eca0Ins triggered");

  Ptr<Tuple> result = finger;

  result = result->Project(
      UNIQUEFINGER,
      strlist("finger_attr1",
              "finger_attr4"),
      strlist("uniqueFinger_attr1",
              "uniqueFinger_attr2"));

  Insert(result);
}

void Chord::C1_ecaperiodic()
{
  RAPIDNET_LOG_INFO("C1_ecaperiodic triggered");

  SendLocal(rtuple(C1_ECAPERIODIC, attrlist(
                                       attr("c1_ecaperiodic_attr1", Ipv4Value, GetAddress()),
                                       attr("c1_ecaperiodic_attr2", Int32Value, rand()))));

  if (++m_count_c1_ecaperiodic < 3)
  {
    m_event_c1_ecaperiodic = Simulator::Schedule(Seconds(5),
                                                 &Chord::C1_ecaperiodic, this);
  }
}

void Chord::C1_eca(Ptr<Tuple> c1_ecaperiodic)
{
  RAPIDNET_LOG_INFO("C1_eca triggered");

  Ptr<Tuple> result = c1_ecaperiodic;

  result = result->Project(
      JOINEVENT,
      strlist("c1_ecaperiodic_attr1",
              "c1_ecaperiodic_attr2"),
      strlist("joinEvent_attr1",
              "joinEvent_attr2"));

  SendLocal(result);
}

void Chord::C2_eca(Ptr<Tuple> joinEvent)
{
  RAPIDNET_LOG_INFO("C2_eca triggered");

  Ptr<Tuple> result = joinEvent;

  result = result->Project(
      JOIN,
      strlist("joinEvent_attr1",
              "joinEvent_attr2"),
      strlist("join_attr1",
              "join_attr2"));

  Insert(result);
}

void Chord::C3_eca(Ptr<Tuple> joinEvent)
{
  RAPIDNET_LOG_INFO("C3_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(NODE)->Join(
      joinEvent,
      strlist("node_attr1"),
      strlist("joinEvent_attr1"));

  result = GetRelation(LANDMARK)->Join(
      result,
      strlist("landmark_attr1"),
      strlist("joinEvent_attr1"));

  result = result->Select(Selector::New(
      Operation::New(RN_NEQ,
                     VarExpr::New("landmark_attr2"),
                     ValueExpr::New(StrValue::New("NIL")))));

  result = result->Project(
      JOINREQ,
      strlist("landmark_attr2",
              "node_attr2",
              "joinEvent_attr1",
              "joinEvent_attr2",
              "landmark_attr2"),
      strlist("joinReq_attr1",
              "joinReq_attr2",
              "joinReq_attr3",
              "joinReq_attr4",
              RN_DEST));

  Send(result);
}

void Chord::C4_eca(Ptr<Tuple> joinEvent)
{
  RAPIDNET_LOG_INFO("C4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(LANDMARK)->Join(
      joinEvent,
      strlist("landmark_attr1"),
      strlist("joinEvent_attr1"));

  result = GetRelation(NODE)->Join(
      result,
      strlist("node_attr1"),
      strlist("joinEvent_attr1"));

  result->Assign(Assignor::New("$1",
                               VarExpr::New("joinEvent_attr1")));

  result->Assign(Assignor::New("D",
                               Operation::New(RN_MINUS,
                                              Operation::New(RN_MINUS,
                                                             VarExpr::New("node_attr2"),
                                                             VarExpr::New("node_attr2")),
                                              ValueExpr::New(Int32Value::New(1)))));

  result = result->Select(Selector::New(
      Operation::New(RN_EQ,
                     VarExpr::New("landmark_attr2"),
                     ValueExpr::New(StrValue::New("NIL")))));

  result = result->Project(
      SUCCEVICTPOLICY,
      strlist("joinEvent_attr1",
              "D",
              "node_attr2",
              "$1"),
      strlist("succEvictPolicy_attr1",
              "succEvictPolicy_attr2",
              "succEvictPolicy_attr3",
              "succEvictPolicy_attr4"));

  Insert(result);
}

void Chord::C5_eca(Ptr<Tuple> joinReq)
{
  RAPIDNET_LOG_INFO("C5_eca triggered");

  Ptr<Tuple> result = joinReq;

  result = result->Project(
      LOOKUP,
      strlist("joinReq_attr1",
              "joinReq_attr2",
              "joinReq_attr3",
              "joinReq_attr4"),
      strlist("lookup_attr1",
              "lookup_attr2",
              "lookup_attr3",
              "lookup_attr4"));

  SendLocal(result);
}

void Chord::C6_eca(Ptr<Tuple> lookupResults)
{
  RAPIDNET_LOG_INFO("C6_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(JOIN)->Join(
      lookupResults,
      strlist("join_attr2", "join_attr1"),
      strlist("lookupResults_attr5", "lookupResults_attr1"));

  result = GetRelation(NODE)->Join(
      result,
      strlist("node_attr1"),
      strlist("lookupResults_attr1"));

  result->Assign(Assignor::New("D",
                               Operation::New(RN_MINUS,
                                              Operation::New(RN_MINUS,
                                                             VarExpr::New("lookupResults_attr3"),
                                                             VarExpr::New("node_attr2")),
                                              ValueExpr::New(Int32Value::New(1)))));

  result = result->Project(
      SUCCEVICTPOLICY,
      strlist("lookupResults_attr1",
              "D",
              "lookupResults_attr3",
              "lookupResults_attr4"),
      strlist("succEvictPolicy_attr1",
              "succEvictPolicy_attr2",
              "succEvictPolicy_attr3",
              "succEvictPolicy_attr4"));

  Insert(result);
}

void Chord::Sb0_ecaperiodic()
{
  RAPIDNET_LOG_INFO("Sb0_ecaperiodic triggered");

  SendLocal(rtuple(SB0_ECAPERIODIC, attrlist(
                                        attr("sb0_ecaperiodic_attr1", Ipv4Value, GetAddress()),
                                        attr("sb0_ecaperiodic_attr2", Int32Value, rand()))));

  m_event_sb0_ecaperiodic = Simulator::Schedule(Seconds(50),
                                                &Chord::Sb0_ecaperiodic, this);
}

void Chord::Sb0_eca(Ptr<Tuple> sb0_ecaperiodic)
{
  RAPIDNET_LOG_INFO("Sb0_eca triggered");

  Ptr<Tuple> result = sb0_ecaperiodic;

  result = result->Project(
      STABILIZEEVENT,
      strlist("sb0_ecaperiodic_attr1"),
      strlist("stabilizeEvent_attr1"));

  SendLocal(result);
}

void Chord::Sb1ALocal1_eca(Ptr<Tuple> stabilizeEvent)
{
  RAPIDNET_LOG_INFO("Sb1ALocal1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(NODE)->Join(
      stabilizeEvent,
      strlist("node_attr1"),
      strlist("stabilizeEvent_attr1"));

  result = GetRelation(BESTSUCC)->Join(
      result,
      strlist("bestSucc_attr1"),
      strlist("stabilizeEvent_attr1"));

  result = result->Project(
      SB1ASTABILIZEEVENTNODEBESTSUCCSI,
      strlist("stabilizeEvent_attr1",
              "node_attr2",
              "bestSucc_attr2",
              "bestSucc_attr3",
              "bestSucc_attr3"),
      strlist("sb1AstabilizeEventnodebestSuccSI_attr1",
              "sb1AstabilizeEventnodebestSuccSI_attr2",
              "sb1AstabilizeEventnodebestSuccSI_attr3",
              "sb1AstabilizeEventnodebestSuccSI_attr4",
              RN_DEST));

  Send(result);
}

void Chord::Sb1ALocal2_eca(Ptr<Tuple> sb1AstabilizeEventnodebestSuccSI)
{
  RAPIDNET_LOG_INFO("Sb1ALocal2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(PRED)->Join(
      sb1AstabilizeEventnodebestSuccSI,
      strlist("pred_attr1"),
      strlist("sb1AstabilizeEventnodebestSuccSI_attr4"));

  result = result->Select(Selector::New(
      Operation::New(RN_NEQ,
                     VarExpr::New("pred_attr3"),
                     ValueExpr::New(StrValue::New("NIL")))));

  result = result->Select(Selector::New(
      RangeExpr::New(RangeExpr::RANGEOO,
                     VarExpr::New("pred_attr2"),
                     VarExpr::New("sb1AstabilizeEventnodebestSuccSI_attr2"),
                     VarExpr::New("sb1AstabilizeEventnodebestSuccSI_attr3"))));

  result = result->Project(
      SUCCEVICTPOLICYEVENT,
      strlist("sb1AstabilizeEventnodebestSuccSI_attr1",
              "pred_attr2",
              "pred_attr3",
              "sb1AstabilizeEventnodebestSuccSI_attr1"),
      strlist("succEvictPolicyEvent_attr1",
              "succEvictPolicyEvent_attr2",
              "succEvictPolicyEvent_attr3",
              RN_DEST));

  Send(result);
}

void Chord::Sb1B_eca(Ptr<Tuple> succEvictPolicyEvent)
{
  RAPIDNET_LOG_INFO("Sb1B_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(NODE)->Join(
      succEvictPolicyEvent,
      strlist("node_attr1"),
      strlist("succEvictPolicyEvent_attr1"));

  result->Assign(Assignor::New("D",
                               Operation::New(RN_MINUS,
                                              Operation::New(RN_MINUS,
                                                             VarExpr::New("succEvictPolicyEvent_attr2"),
                                                             VarExpr::New("node_attr2")),
                                              ValueExpr::New(Int32Value::New(1)))));

  result = result->Project(
      SUCCEVICTPOLICY,
      strlist("succEvictPolicyEvent_attr1",
              "D",
              "succEvictPolicyEvent_attr2",
              "succEvictPolicyEvent_attr3"),
      strlist("succEvictPolicy_attr1",
              "succEvictPolicy_attr2",
              "succEvictPolicy_attr3",
              "succEvictPolicy_attr4"));

  Insert(result);
}

void Chord::Sb2Local1_eca(Ptr<Tuple> stabilizeEvent)
{
  RAPIDNET_LOG_INFO("Sb2Local1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(NODE)->Join(
      stabilizeEvent,
      strlist("node_attr1"),
      strlist("stabilizeEvent_attr1"));

  result = GetRelation(SUCCEVICTPOLICY)->Join(result, strlist("succEvictPolicy_attr1"), strlist("stabilizeEvent_attr1"));

  result = result->Project(
      SB2STABILIZEEVENTNODESUCCEVICTPOLICYSI,
      strlist("stabilizeEvent_attr1",
              "node_attr2",
              "succEvictPolicy_attr2",
              "succEvictPolicy_attr3",
              "succEvictPolicy_attr4",
              "succEvictPolicy_attr4"),
      strlist("sb2stabilizeEventnodesuccEvictPolicySI_attr1",
              "sb2stabilizeEventnodesuccEvictPolicySI_attr2",
              "sb2stabilizeEventnodesuccEvictPolicySI_attr3",
              "sb2stabilizeEventnodesuccEvictPolicySI_attr4",
              "sb2stabilizeEventnodesuccEvictPolicySI_attr5",
              RN_DEST));

  Send(result);
}

void Chord::Sb2Local2ECAMat(Ptr<Tuple> sb2Local2succEvictPolicysend)
{
  RAPIDNET_LOG_INFO("Sb2Local2ECAMat triggered");

  Ptr<Tuple> result = sb2Local2succEvictPolicysend;

  result = result->Project(
      SUCCEVICTPOLICY,
      strlist("sb2Local2succEvictPolicysend_attr1",
              "sb2Local2succEvictPolicysend_attr2",
              "sb2Local2succEvictPolicysend_attr3",
              "sb2Local2succEvictPolicysend_attr4"),
      strlist("succEvictPolicy_attr1",
              "succEvictPolicy_attr2",
              "succEvictPolicy_attr3",
              "succEvictPolicy_attr4"));

  Insert(result);
}

void Chord::Sb2Local2_eca(Ptr<Tuple> sb2stabilizeEventnodesuccEvictPolicySI)
{
  RAPIDNET_LOG_INFO("Sb2Local2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(SUCCEVICTPOLICY)->Join(sb2stabilizeEventnodesuccEvictPolicySI, strlist("succEvictPolicy_attr1"), strlist("sb2stabilizeEventnodesuccEvictPolicySI_attr5"));

  result->Assign(Assignor::New("D2",
                               Operation::New(RN_MINUS,
                                              Operation::New(RN_MINUS,
                                                             VarExpr::New("succEvictPolicy_attr3"),
                                                             VarExpr::New("sb2stabilizeEventnodesuccEvictPolicySI_attr2")),
                                              ValueExpr::New(Int32Value::New(1)))));

  result = result->Select(Selector::New(
      Operation::New(RN_NEQ,
                     VarExpr::New("succEvictPolicy_attr4"),
                     VarExpr::New("sb2stabilizeEventnodesuccEvictPolicySI_attr1"))));

  result = result->Project(
      SB2LOCAL2SUCCEVICTPOLICYSEND,
      strlist("sb2stabilizeEventnodesuccEvictPolicySI_attr1",
              "D2",
              "succEvictPolicy_attr3",
              "succEvictPolicy_attr4",
              "sb2stabilizeEventnodesuccEvictPolicySI_attr1"),
      strlist("sb2Local2succEvictPolicysend_attr1",
              "sb2Local2succEvictPolicysend_attr2",
              "sb2Local2succEvictPolicysend_attr3",
              "sb2Local2succEvictPolicysend_attr4",
              RN_DEST));

  Send(result);
}

void Chord::Sb3Local1_eca(Ptr<Tuple> stabilizeEvent)
{
  RAPIDNET_LOG_INFO("Sb3Local1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(NODE)->Join(
      stabilizeEvent,
      strlist("node_attr1"),
      strlist("stabilizeEvent_attr1"));

  result = GetRelation(SUCCEVICTPOLICY)->Join(result, strlist("succEvictPolicy_attr1"), strlist("stabilizeEvent_attr1"));

  result = result->Project(
      SB3STABILIZEEVENTNODESUCCEVICTPOLICYSI,
      strlist("stabilizeEvent_attr1",
              "node_attr2",
              "succEvictPolicy_attr2",
              "succEvictPolicy_attr3",
              "succEvictPolicy_attr4",
              "succEvictPolicy_attr4"),
      strlist("sb3stabilizeEventnodesuccEvictPolicySI_attr1",
              "sb3stabilizeEventnodesuccEvictPolicySI_attr2",
              "sb3stabilizeEventnodesuccEvictPolicySI_attr3",
              "sb3stabilizeEventnodesuccEvictPolicySI_attr4",
              "sb3stabilizeEventnodesuccEvictPolicySI_attr5",
              RN_DEST));

  Send(result);
}

void Chord::Sb3Local2_eca(Ptr<Tuple> sb3stabilizeEventnodesuccEvictPolicySI)
{
  RAPIDNET_LOG_INFO("Sb3Local2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(PRED)->Join(
      sb3stabilizeEventnodesuccEvictPolicySI,
      strlist("pred_attr1"),
      strlist("sb3stabilizeEventnodesuccEvictPolicySI_attr5"));

  result = GetRelation(NODE)->Join(
      result,
      strlist("node_attr1"),
      strlist("sb3stabilizeEventnodesuccEvictPolicySI_attr5"));

  result = result->Select(Selector::New(
      Operation::New(RN_AND,
                     Operation::New(RN_OR,
                                    Operation::New(RN_EQ,
                                                   VarExpr::New("pred_attr3"),
                                                   ValueExpr::New(StrValue::New("NIL"))),
                                    RangeExpr::New(RangeExpr::RANGEOO,
                                                   VarExpr::New("sb3stabilizeEventnodesuccEvictPolicySI_attr2"),
                                                   VarExpr::New("pred_attr2"),
                                                   VarExpr::New("node_attr2"))),
                     Operation::New(RN_NEQ,
                                    VarExpr::New("sb3stabilizeEventnodesuccEvictPolicySI_attr1"),
                                    VarExpr::New("sb3stabilizeEventnodesuccEvictPolicySI_attr5")))));

  result = result->Project(
      PRED,
      strlist("sb3stabilizeEventnodesuccEvictPolicySI_attr5",
              "sb3stabilizeEventnodesuccEvictPolicySI_attr2",
              "sb3stabilizeEventnodesuccEvictPolicySI_attr1"),
      strlist("pred_attr1",
              "pred_attr2",
              "pred_attr3"));

  Insert(result);
}

void Chord::Pp1_ecaperiodic()
{
  RAPIDNET_LOG_INFO("Pp1_ecaperiodic triggered");

  SendLocal(rtuple(PP1_ECAPERIODIC, attrlist(
                                        attr("pp1_ecaperiodic_attr1", Ipv4Value, GetAddress()),
                                        attr("pp1_ecaperiodic_attr2", Int32Value, rand()))));

  m_event_pp1_ecaperiodic = Simulator::Schedule(Seconds(10),
                                                &Chord::Pp1_ecaperiodic, this);
}

void Chord::Pp1_eca(Ptr<Tuple> pp1_ecaperiodic)
{
  RAPIDNET_LOG_INFO("Pp1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(SUCCEVICTPOLICY)->Join(pp1_ecaperiodic, strlist("succEvictPolicy_attr1"), strlist("pp1_ecaperiodic_attr1"));

  result->Assign(Assignor::New("E1",
                               FRand::New()));

  result->Assign(Assignor::New("T",
                               FNow::New()));

  result = result->Select(Selector::New(
      Operation::New(RN_NEQ,
                     VarExpr::New("succEvictPolicy_attr4"),
                     VarExpr::New("pp1_ecaperiodic_attr1"))));

  result = result->Project(
      PENDINGPING,
      strlist("pp1_ecaperiodic_attr1",
              "succEvictPolicy_attr4",
              "E1",
              "T"),
      strlist("pendingPing_attr1",
              "pendingPing_attr2",
              "pendingPing_attr3",
              "pendingPing_attr4"));

  Insert(result);
}

void Chord::Pp2_ecaperiodic()
{
  RAPIDNET_LOG_INFO("Pp2_ecaperiodic triggered");

  SendLocal(rtuple(PP2_ECAPERIODIC, attrlist(
                                        attr("pp2_ecaperiodic_attr1", Ipv4Value, GetAddress()),
                                        attr("pp2_ecaperiodic_attr2", Int32Value, rand()))));

  m_event_pp2_ecaperiodic = Simulator::Schedule(Seconds(10),
                                                &Chord::Pp2_ecaperiodic, this);
}

void Chord::Pp2_eca(Ptr<Tuple> pp2_ecaperiodic)
{
  RAPIDNET_LOG_INFO("Pp2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(PRED)->Join(
      pp2_ecaperiodic,
      strlist("pred_attr1"),
      strlist("pp2_ecaperiodic_attr1"));

  result->Assign(Assignor::New("E1",
                               FRand::New()));

  result->Assign(Assignor::New("T",
                               FNow::New()));

  result = result->Select(Selector::New(
      Operation::New(RN_NEQ,
                     VarExpr::New("pred_attr3"),
                     ValueExpr::New(StrValue::New("NIL")))));

  result = result->Select(Selector::New(
      Operation::New(RN_NEQ,
                     VarExpr::New("pred_attr3"),
                     VarExpr::New("pp2_ecaperiodic_attr1"))));

  result = result->Project(
      PENDINGPING,
      strlist("pp2_ecaperiodic_attr1",
              "pred_attr3",
              "E1",
              "T"),
      strlist("pendingPing_attr1",
              "pendingPing_attr2",
              "pendingPing_attr3",
              "pendingPing_attr4"));

  Insert(result);
}

void Chord::Pp3_ecaperiodic()
{
  RAPIDNET_LOG_INFO("Pp3_ecaperiodic triggered");

  SendLocal(rtuple(PP3_ECAPERIODIC, attrlist(
                                        attr("pp3_ecaperiodic_attr1", Ipv4Value, GetAddress()),
                                        attr("pp3_ecaperiodic_attr2", Int32Value, rand()))));

  m_event_pp3_ecaperiodic = Simulator::Schedule(Seconds(10),
                                                &Chord::Pp3_ecaperiodic, this);
}

void Chord::Pp3_eca(Ptr<Tuple> pp3_ecaperiodic)
{
  RAPIDNET_LOG_INFO("Pp3_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(UNIQUEFINGER)->Join(pp3_ecaperiodic, strlist("uniqueFinger_attr1"), strlist("pp3_ecaperiodic_attr1"));

  result->Assign(Assignor::New("E1",
                               FRand::New()));

  result->Assign(Assignor::New("T",
                               FNow::New()));

  result = result->Select(Selector::New(
      Operation::New(RN_NEQ,
                     VarExpr::New("uniqueFinger_attr2"),
                     VarExpr::New("pp3_ecaperiodic_attr1"))));

  result = result->Project(
      PENDINGPING,
      strlist("pp3_ecaperiodic_attr1",
              "uniqueFinger_attr2",
              "E1",
              "T"),
      strlist("pendingPing_attr1",
              "pendingPing_attr2",
              "pendingPing_attr3",
              "pendingPing_attr4"));

  Insert(result);
}

void Chord::Pp4_eca(Ptr<Tuple> pingReq)
{
  RAPIDNET_LOG_INFO("Pp4_eca triggered");

  Ptr<Tuple> result = pingReq;

  result = result->Project(
      PINGRESP,
      strlist("pingReq_attr2",
              "pingReq_attr1",
              "pingReq_attr3",
              "pingReq_attr2"),
      strlist("pingResp_attr1",
              "pingResp_attr2",
              "pingResp_attr3",
              RN_DEST));

  Send(result);
}

void Chord::Pp5_ecaperiodic()
{
  RAPIDNET_LOG_INFO("Pp5_ecaperiodic triggered");

  SendLocal(rtuple(PP5_ECAPERIODIC, attrlist(
                                        attr("pp5_ecaperiodic_attr1", Ipv4Value, GetAddress()),
                                        attr("pp5_ecaperiodic_attr2", Int32Value, rand()))));

  m_event_pp5_ecaperiodic = Simulator::Schedule(Seconds(3),
                                                &Chord::Pp5_ecaperiodic, this);
}

void Chord::Pp5_eca(Ptr<Tuple> pp5_ecaperiodic)
{
  RAPIDNET_LOG_INFO("Pp5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(PENDINGPING)->Join(pp5_ecaperiodic, strlist("pendingPing_attr1"), strlist("pp5_ecaperiodic_attr1"));

  result = result->Project(
      PINGREQ,
      strlist("pendingPing_attr2",
              "pp5_ecaperiodic_attr1",
              "pendingPing_attr3",
              "pendingPing_attr2"),
      strlist("pingReq_attr1",
              "pingReq_attr2",
              "pingReq_attr3",
              RN_DEST));

  Send(result);
}

void Chord::Pp6_eca(Ptr<Tuple> pingResp)
{
  RAPIDNET_LOG_INFO("Pp6_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(PENDINGPING)->Join(pingResp, strlist("pendingPing_attr1", "pendingPing_attr2"), strlist("pingResp_attr1", "pingResp_attr2"));

  result = result->Project(
      PENDINGPING,
      strlist("pingResp_attr1",
              "pingResp_attr2",
              "pendingPing_attr3",
              "pendingPing_attr4"),
      strlist("pendingPing_attr1",
              "pendingPing_attr2",
              "pendingPing_attr3",
              "pendingPing_attr4"));

  Delete(result);
}

void Chord::Cm1_ecaperiodic()
{
  RAPIDNET_LOG_INFO("Cm1_ecaperiodic triggered");

  SendLocal(rtuple(CM1_ECAPERIODIC, attrlist(
                                        attr("cm1_ecaperiodic_attr1", Ipv4Value, GetAddress()),
                                        attr("cm1_ecaperiodic_attr2", Int32Value, rand()))));

  m_event_cm1_ecaperiodic = Simulator::Schedule(Seconds(1),
                                                &Chord::Cm1_ecaperiodic, this);
}

void Chord::Cm1_eca(Ptr<Tuple> cm1_ecaperiodic)
{
  RAPIDNET_LOG_INFO("Cm1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(PENDINGPING)->Join(cm1_ecaperiodic, strlist("pendingPing_attr1"), strlist("cm1_ecaperiodic_attr1"));

  result->Assign(Assignor::New("T1",
                               FNow::New()));

  result->Assign(Assignor::New("D",
                               Operation::New(RN_MINUS,
                                              VarExpr::New("T1"),
                                              VarExpr::New("pendingPing_attr4"))));

  result = result->Select(Selector::New(
      Operation::New(RN_GT,
                     VarExpr::New("D"),
                     ValueExpr::New(Int32Value::New(7)))));

  result = result->Project(
      NODEFAILURE,
      strlist("cm1_ecaperiodic_attr1",
              "pendingPing_attr2",
              "pendingPing_attr3",
              "D"),
      strlist("nodeFailure_attr1",
              "nodeFailure_attr2",
              "nodeFailure_attr3",
              "nodeFailure_attr4"));

  SendLocal(result);
}

void Chord::Cm1a_eca(Ptr<Tuple> nodeFailure)
{
  RAPIDNET_LOG_INFO("Cm1a_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(PENDINGPING)->Join(nodeFailure, strlist("pendingPing_attr3", "pendingPing_attr1", "pendingPing_attr2"), strlist("nodeFailure_attr3", "nodeFailure_attr1", "nodeFailure_attr2"));

  result = result->Project(
      PENDINGPING,
      strlist("nodeFailure_attr1",
              "nodeFailure_attr2",
              "nodeFailure_attr3",
              "pendingPing_attr4"),
      strlist("pendingPing_attr1",
              "pendingPing_attr2",
              "pendingPing_attr3",
              "pendingPing_attr4"));

  Delete(result);
}

void Chord::Cm2a_eca(Ptr<Tuple> nodeFailure)
{
  RAPIDNET_LOG_INFO("Cm2a_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(SUCCEVICTPOLICY)->Join(nodeFailure, strlist("succEvictPolicy_attr1", "succEvictPolicy_attr4"), strlist("nodeFailure_attr1", "nodeFailure_attr2"));

  result = result->Project(
      DELETESUCC,
      strlist("nodeFailure_attr1",
              "succEvictPolicy_attr2",
              "succEvictPolicy_attr3",
              "nodeFailure_attr2"),
      strlist("deleteSucc_attr1",
              "deleteSucc_attr2",
              "deleteSucc_attr3",
              "deleteSucc_attr4"));

  SendLocal(result);
}

void Chord::Cm2b_eca(Ptr<Tuple> deleteSucc)
{
  RAPIDNET_LOG_INFO("Cm2b_eca triggered");

  Ptr<Tuple> result = deleteSucc;

  result = result->Project(
      SUCCEVICTPOLICY,
      strlist("deleteSucc_attr1",
              "deleteSucc_attr2",
              "deleteSucc_attr3",
              "deleteSucc_attr4"),
      strlist("succEvictPolicy_attr1",
              "succEvictPolicy_attr2",
              "succEvictPolicy_attr3",
              "succEvictPolicy_attr4"));

  Delete(result);
}

void Chord::Cm3_eca(Ptr<Tuple> nodeFailure)
{
  RAPIDNET_LOG_INFO("Cm3_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(PRED)->Join(
      nodeFailure,
      strlist("pred_attr1", "pred_attr3"),
      strlist("nodeFailure_attr1", "nodeFailure_attr2"));

  result->Assign(Assignor::New("$1",
                               ValueExpr::New(StrValue::New("NIL"))));

  result->Assign(Assignor::New("$2",
                               ValueExpr::New(StrValue::New("NIL"))));

  result = result->Project(
      PRED,
      strlist("nodeFailure_attr1",
              "$1",
              "$2"),
      strlist("pred_attr1",
              "pred_attr2",
              "pred_attr3"));

  Insert(result);
}

void Chord::Cm4_eca(Ptr<Tuple> nodeFailure)
{
  RAPIDNET_LOG_INFO("Cm4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(FINGER)->Join(
      nodeFailure,
      strlist("finger_attr4", "finger_attr1"),
      strlist("nodeFailure_attr2", "nodeFailure_attr1"));

  result = result->Project(
      FINGER,
      strlist("nodeFailure_attr1",
              "finger_attr2",
              "finger_attr3",
              "nodeFailure_attr2"),
      strlist("finger_attr1",
              "finger_attr2",
              "finger_attr3",
              "finger_attr4"));

  Delete(result);
}

void Chord::Cm6_eca(Ptr<Tuple> nodeFailure)
{
  RAPIDNET_LOG_INFO("Cm6_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation(UNIQUEFINGER)->Join(nodeFailure, strlist("uniqueFinger_attr2", "uniqueFinger_attr1"), strlist("nodeFailure_attr2", "nodeFailure_attr1"));

  result = result->Project(
      UNIQUEFINGER,
      strlist("nodeFailure_attr1",
              "nodeFailure_attr2"),
      strlist("uniqueFinger_attr1",
              "uniqueFinger_attr2"));

  Delete(result);
}
