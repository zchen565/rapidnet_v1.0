/* A RapidNet application. Generated by RapidNet compiler. */

#include "emu-ls-periodic.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::emulsperiodic;

const string EmuLsPeriodic::APPTABLE = "apptable";
const string EmuLsPeriodic::ELSU = "eLSU";
const string EmuLsPeriodic::ELSUCHANGE = "eLSUChange";
const string EmuLsPeriodic::ELSUCOUNT = "eLSUCount";
const string EmuLsPeriodic::ELSUFILTERED = "eLSUFiltered";
const string EmuLsPeriodic::ELSULOC = "eLSULoc";
const string EmuLsPeriodic::ELINKADD = "eLinkAdd";
const string EmuLsPeriodic::ELINKCOUNT = "eLinkCount";
const string EmuLsPeriodic::PERIODIC = "periodic";
const string EmuLsPeriodic::R11_ECAPERIODIC = "r11_ecaperiodic";
const string EmuLsPeriodic::R61A_ECAPERIODIC = "r61A_ecaperiodic";
const string EmuLsPeriodic::R61B_ECAPERIODIC = "r61B_ecaperiodic";
const string EmuLsPeriodic::TLSU = "tLSU";
const string EmuLsPeriodic::TLINK = "tLink";

NS_LOG_COMPONENT_DEFINE ("EmuLsPeriodic");
NS_OBJECT_ENSURE_REGISTERED (EmuLsPeriodic);

TypeId
EmuLsPeriodic::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::emulsperiodic::EmuLsPeriodic")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<EmuLsPeriodic> ()
    ;
  return tid;
}

EmuLsPeriodic::EmuLsPeriodic()
{
  NS_LOG_FUNCTION_NOARGS ();
}

EmuLsPeriodic::~EmuLsPeriodic()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
EmuLsPeriodic::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
EmuLsPeriodic::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  m_event_r11_ecaperiodic=
    Simulator::Schedule (Seconds (0.5), &EmuLsPeriodic::R11_ecaperiodic, this);
  m_event_r61a_ecaperiodic=
    Simulator::Schedule (Seconds (60 + (drand48 () * 30)), &EmuLsPeriodic::R61A_ecaperiodic, this);
  m_event_r61b_ecaperiodic=
    Simulator::Schedule (Seconds (59), &EmuLsPeriodic::R61B_ecaperiodic, this);
  RAPIDNET_LOG_INFO("EmuLsPeriodic Application Started");
}

void
EmuLsPeriodic::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  Simulator::Cancel(m_event_r11_ecaperiodic);
  Simulator::Cancel(m_event_r61a_ecaperiodic);
  Simulator::Cancel(m_event_r61b_ecaperiodic);
  RAPIDNET_LOG_INFO("EmuLsPeriodic Application Stopped");
}

void
EmuLsPeriodic::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (APPTABLE, attrdeflist (
    attrdef ("apptable_attr1", IPV4),
    attrdef ("apptable_attr2", IPV4)));

  AddRelationWithKeys (TLSU, attrdeflist (
    attrdef ("tLSU_attr1", IPV4),
    attrdef ("tLSU_attr2", IPV4),
    attrdef ("tLSU_attr3", IPV4)),
    Seconds (65));

  AddRelationWithKeys (TLINK, attrdeflist (
    attrdef ("tLink_attr1", IPV4),
    attrdef ("tLink_attr2", IPV4)),
    Seconds (11));

}

void
EmuLsPeriodic::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsRecvEvent (tuple, R11_ECAPERIODIC))
    {
      R11_eca (tuple);
    }
  if (IsRecvEvent (tuple, ELINKADD))
    {
      R33_eca (tuple);
    }
  if (IsRecvEvent (tuple, ELINKCOUNT))
    {
      R34_eca (tuple);
    }
  if (IsRecvEvent (tuple, ELINKADD))
    {
      R35_eca (tuple);
    }
  if (IsRecvEvent (tuple, R61A_ECAPERIODIC))
    {
      R61A_eca (tuple);
    }
  if (IsRecvEvent (tuple, R61B_ECAPERIODIC))
    {
      R61B_eca (tuple);
    }
  if (IsRecvEvent (tuple, ELSU))
    {
      R70_eca (tuple);
    }
  if (IsRecvEvent (tuple, ELSULOC))
    {
      RFilter_eca (tuple);
    }
  if (IsRecvEvent (tuple, ELSUFILTERED))
    {
      R71_eca (tuple);
    }
  if (IsRecvEvent (tuple, ELSUCOUNT))
    {
      R72_eca (tuple);
    }
  if (IsRecvEvent (tuple, ELSUFILTERED))
    {
      R73_eca (tuple);
    }
  if (IsInsertEvent (tuple, TLSU))
    {
      R81Eca0Ins (tuple);
    }
  if (IsRefreshEvent (tuple, TLSU))
    {
      R81Eca0Ref (tuple);
    }
  if (IsRecvEvent (tuple, ELSUCHANGE))
    {
      R82_eca (tuple);
    }
}

void
EmuLsPeriodic::R11_ecaperiodic ()
{
  RAPIDNET_LOG_INFO ("R11_ecaperiodic triggered");

  SendLocal (rtuple (R11_ECAPERIODIC, attrlist (
    attr ("r11_ecaperiodic_attr1", Ipv4Value, GetAddress ()),
    attr ("r11_ecaperiodic_attr2", Int32Value, rand ()))));

  m_event_r11_ecaperiodic = Simulator::Schedule (Seconds(5),
    &EmuLsPeriodic::R11_ecaperiodic, this);
}

void
EmuLsPeriodic::R11_eca (Ptr<Tuple> r11_ecaperiodic)
{
  RAPIDNET_LOG_INFO ("R11_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (APPTABLE)->Join (
    r11_ecaperiodic,
    strlist ("apptable_attr1"),
    strlist ("r11_ecaperiodic_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("r11_ecaperiodic_attr1"),
      VarExpr::New ("apptable_attr2"))));

  result = result->Project (
    ELINKADD,
    strlist ("r11_ecaperiodic_attr1",
      "apptable_attr2",
      "apptable_attr3"),
    strlist ("eLinkAdd_attr1",
      "eLinkAdd_attr2",
      "eLinkAdd_attr3"));

  SendLocal (result);
}

void
EmuLsPeriodic::R33_eca (Ptr<Tuple> eLinkAdd)
{
  RAPIDNET_LOG_INFO ("R33_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TLINK)->Join (
    eLinkAdd,
    strlist ("tLink_attr2", "tLink_attr1"),
    strlist ("eLinkAdd_attr2", "eLinkAdd_attr1"));

  result = AggWrapCount::New ()->Compute (result, eLinkAdd);

  result = result->Project (
    ELINKCOUNT,
    strlist ("eLinkAdd_attr1",
      "eLinkAdd_attr2",
      "eLinkAdd_attr3",
      "count"),
    strlist ("eLinkCount_attr1",
      "eLinkCount_attr2",
      "eLinkCount_attr3",
      "eLinkCount_attr4"));

  SendLocal (result);
}

void
EmuLsPeriodic::R34_eca (Ptr<Tuple> eLinkCount)
{
  RAPIDNET_LOG_INFO ("R34_eca triggered");

  Ptr<Tuple> result = eLinkCount;

  result->Assign (Assignor::New ("SeqNum",
    ValueExpr::New (Int32Value::New (0))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("eLinkCount_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    TLINK,
    strlist ("eLinkCount_attr1",
      "eLinkCount_attr2",
      "eLinkCount_attr3",
      "SeqNum"),
    strlist ("tLink_attr1",
      "tLink_attr2",
      "tLink_attr3",
      "tLink_attr4"));

  Insert (result);
}

void
EmuLsPeriodic::R35_eca (Ptr<Tuple> eLinkAdd)
{
  RAPIDNET_LOG_INFO ("R35_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TLINK)->Join (
    eLinkAdd,
    strlist ("tLink_attr2", "tLink_attr1"),
    strlist ("eLinkAdd_attr2", "eLinkAdd_attr1"));

  result = result->Project (
    TLINK,
    strlist ("eLinkAdd_attr1",
      "eLinkAdd_attr2",
      "eLinkAdd_attr3",
      "tLink_attr4"),
    strlist ("tLink_attr1",
      "tLink_attr2",
      "tLink_attr3",
      "tLink_attr4"));

  Insert (result);
}

void
EmuLsPeriodic::R61A_ecaperiodic ()
{
  RAPIDNET_LOG_INFO ("R61A_ecaperiodic triggered");

  SendLocal (rtuple (R61A_ECAPERIODIC, attrlist (
    attr ("r61A_ecaperiodic_attr1", Ipv4Value, GetAddress ()),
    attr ("r61A_ecaperiodic_attr2", Int32Value, rand ()))));

  m_event_r61a_ecaperiodic = Simulator::Schedule (Seconds(60),
    &EmuLsPeriodic::R61A_ecaperiodic, this);
}

void
EmuLsPeriodic::R61A_eca (Ptr<Tuple> r61A_ecaperiodic)
{
  RAPIDNET_LOG_INFO ("R61A_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TLINK)->Join (
    r61A_ecaperiodic,
    strlist ("tLink_attr1"),
    strlist ("r61A_ecaperiodic_attr1"));

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("r61A_ecaperiodic_attr1")));

  result->Assign (Assignor::New ("$2",
    VarExpr::New ("r61A_ecaperiodic_attr1")));

  result->Assign (Assignor::New ("TTL",
    ValueExpr::New (Int32Value::New (999999))));

  result = result->Project (
    ELSU,
    strlist ("r61A_ecaperiodic_attr1",
      "$1",
      "$2",
      "tLink_attr2",
      "tLink_attr3",
      "tLink_attr4",
      "TTL"),
    strlist ("eLSU_attr1",
      "eLSU_attr2",
      "eLSU_attr3",
      "eLSU_attr4",
      "eLSU_attr5",
      "eLSU_attr6",
      "eLSU_attr7"));

  SendLocal (result);
}

void
EmuLsPeriodic::R61B_ecaperiodic ()
{
  RAPIDNET_LOG_INFO ("R61B_ecaperiodic triggered");

  SendLocal (rtuple (R61B_ECAPERIODIC, attrlist (
    attr ("r61B_ecaperiodic_attr1", Ipv4Value, GetAddress ()),
    attr ("r61B_ecaperiodic_attr2", Int32Value, rand ()))));

  m_event_r61b_ecaperiodic = Simulator::Schedule (Seconds(60),
    &EmuLsPeriodic::R61B_ecaperiodic, this);
}

void
EmuLsPeriodic::R61B_eca (Ptr<Tuple> r61B_ecaperiodic)
{
  RAPIDNET_LOG_INFO ("R61B_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TLINK)->Join (
    r61B_ecaperiodic,
    strlist ("tLink_attr1"),
    strlist ("r61B_ecaperiodic_attr1"));

  result->Assign (Assignor::New ("SeqNumU",
    Operation::New (RN_PLUS,
      VarExpr::New ("tLink_attr4"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    TLINK,
    strlist ("r61B_ecaperiodic_attr1",
      "tLink_attr2",
      "tLink_attr3",
      "SeqNumU"),
    strlist ("tLink_attr1",
      "tLink_attr2",
      "tLink_attr3",
      "tLink_attr4"));

  Insert (result);
}

void
EmuLsPeriodic::R70_eca (Ptr<Tuple> eLSU)
{
  RAPIDNET_LOG_INFO ("R70_eca triggered");

  Ptr<Tuple> result = eLSU;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ELSULOC,
    strlist ("Local",
      "eLSU_attr2",
      "eLSU_attr3",
      "eLSU_attr4",
      "eLSU_attr5",
      "eLSU_attr6",
      "eLSU_attr7",
      "Local"),
    strlist ("eLSULoc_attr1",
      "eLSULoc_attr2",
      "eLSULoc_attr3",
      "eLSULoc_attr4",
      "eLSULoc_attr5",
      "eLSULoc_attr6",
      "eLSULoc_attr7",
      RN_DEST));

  Send (result);
}

void
EmuLsPeriodic::RFilter_eca (Ptr<Tuple> eLSULoc)
{
  RAPIDNET_LOG_INFO ("RFilter_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (APPTABLE)->Join (
    eLSULoc,
    strlist ("apptable_attr3", "apptable_attr2", "apptable_attr1"),
    strlist ("eLSULoc_attr5", "eLSULoc_attr2", "eLSULoc_attr1"));

  result = result->Project (
    ELSUFILTERED,
    strlist ("eLSULoc_attr1",
      "eLSULoc_attr3",
      "eLSULoc_attr4",
      "eLSULoc_attr5",
      "eLSULoc_attr6",
      "eLSULoc_attr7"),
    strlist ("eLSUFiltered_attr1",
      "eLSUFiltered_attr2",
      "eLSUFiltered_attr3",
      "eLSUFiltered_attr4",
      "eLSUFiltered_attr5",
      "eLSUFiltered_attr6"));

  SendLocal (result);
}

void
EmuLsPeriodic::R71_eca (Ptr<Tuple> eLSUFiltered)
{
  RAPIDNET_LOG_INFO ("R71_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TLSU)->Join (
    eLSUFiltered,
    strlist ("tLSU_attr3", "tLSU_attr2", "tLSU_attr1"),
    strlist ("eLSUFiltered_attr3", "eLSUFiltered_attr2", "eLSUFiltered_attr1"));

  result = AggWrapCount::New ()->Compute (result, eLSUFiltered);

  result = result->Project (
    ELSUCOUNT,
    strlist ("eLSUFiltered_attr1",
      "eLSUFiltered_attr2",
      "eLSUFiltered_attr3",
      "eLSUFiltered_attr4",
      "eLSUFiltered_attr5",
      "eLSUFiltered_attr6",
      "count"),
    strlist ("eLSUCount_attr1",
      "eLSUCount_attr2",
      "eLSUCount_attr3",
      "eLSUCount_attr4",
      "eLSUCount_attr5",
      "eLSUCount_attr6",
      "eLSUCount_attr7"));

  SendLocal (result);
}

void
EmuLsPeriodic::R72_eca (Ptr<Tuple> eLSUCount)
{
  RAPIDNET_LOG_INFO ("R72_eca triggered");

  Ptr<Tuple> result = eLSUCount;

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("eLSUCount_attr7"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    TLSU,
    strlist ("eLSUCount_attr1",
      "eLSUCount_attr2",
      "eLSUCount_attr3",
      "eLSUCount_attr4",
      "eLSUCount_attr5",
      "eLSUCount_attr6"),
    strlist ("tLSU_attr1",
      "tLSU_attr2",
      "tLSU_attr3",
      "tLSU_attr4",
      "tLSU_attr5",
      "tLSU_attr6"));

  Insert (result);
}

void
EmuLsPeriodic::R73_eca (Ptr<Tuple> eLSUFiltered)
{
  RAPIDNET_LOG_INFO ("R73_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TLSU)->Join (
    eLSUFiltered,
    strlist ("tLSU_attr3", "tLSU_attr2", "tLSU_attr1"),
    strlist ("eLSUFiltered_attr3", "eLSUFiltered_attr2", "eLSUFiltered_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("eLSUFiltered_attr5"),
      VarExpr::New ("tLSU_attr5"))));

  result = result->Project (
    TLSU,
    strlist ("eLSUFiltered_attr1",
      "eLSUFiltered_attr2",
      "eLSUFiltered_attr3",
      "eLSUFiltered_attr4",
      "eLSUFiltered_attr5",
      "eLSUFiltered_attr6"),
    strlist ("tLSU_attr1",
      "tLSU_attr2",
      "tLSU_attr3",
      "tLSU_attr4",
      "tLSU_attr5",
      "tLSU_attr6"));

  Insert (result);
}

void
EmuLsPeriodic::R81Eca0Ins (Ptr<Tuple> tLSU)
{
  RAPIDNET_LOG_INFO ("R81Eca0Ins triggered");

  Ptr<Tuple> result = tLSU;

  result = result->Project (
    ELSUCHANGE,
    strlist ("tLSU_attr1",
      "tLSU_attr2",
      "tLSU_attr3",
      "tLSU_attr4",
      "tLSU_attr5",
      "tLSU_attr6"),
    strlist ("eLSUChange_attr1",
      "eLSUChange_attr2",
      "eLSUChange_attr3",
      "eLSUChange_attr4",
      "eLSUChange_attr5",
      "eLSUChange_attr6"));

  SendLocal (result);
}

void
EmuLsPeriodic::R81Eca0Ref (Ptr<Tuple> tLSU)
{
  RAPIDNET_LOG_INFO ("R81Eca0Ref triggered");

  Ptr<Tuple> result = tLSU;

  result = result->Project (
    ELSUCHANGE,
    strlist ("tLSU_attr1",
      "tLSU_attr2",
      "tLSU_attr3",
      "tLSU_attr4",
      "tLSU_attr5",
      "tLSU_attr6"),
    strlist ("eLSUChange_attr1",
      "eLSUChange_attr2",
      "eLSUChange_attr3",
      "eLSUChange_attr4",
      "eLSUChange_attr5",
      "eLSUChange_attr6"));

  SendLocal (result);
}

void
EmuLsPeriodic::R82_eca (Ptr<Tuple> eLSUChange)
{
  RAPIDNET_LOG_INFO ("R82_eca triggered");

  Ptr<Tuple> result = eLSUChange;

  result->Assign (Assignor::New ("TTLU",
    Operation::New (RN_MINUS,
      VarExpr::New ("eLSUChange_attr6"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("Broadcast",
    BROADCAST_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("eLSUChange_attr6"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    ELSU,
    strlist ("Broadcast",
      "eLSUChange_attr1",
      "eLSUChange_attr2",
      "eLSUChange_attr3",
      "eLSUChange_attr4",
      "eLSUChange_attr5",
      "TTLU",
      "Broadcast"),
    strlist ("eLSU_attr1",
      "eLSU_attr2",
      "eLSU_attr3",
      "eLSU_attr4",
      "eLSU_attr5",
      "eLSU_attr6",
      "eLSU_attr7",
      RN_DEST));

  Send (result);
}

