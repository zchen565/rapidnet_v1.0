#!/usr/bin/python
import sys, os
from time import strftime, gmtime

#Global variables
PLOTTER_PATH = 'rapidnet/bandwidth'
PLOTTER = PLOTTER_PATH + '/sim_plot_bandwidthplot'

MODEL = {
  'ns3::ConstantPositionMobilityModel': 'static',
  'ns3::RandomWaypointMobilityModel': 'randomwaypoint',
  'ns3::RandomWalk2dMobilityModel': 'randomwalk2d',
  'ns3::HierarchicalMobilityModel': 'hierarchical'
  }

# Utility function that returns the 1-based nodeid to
# node IP address map
# Caution: This is a small work around we have to do. Note
# that it is possible that it may not be same as the ones
# generated by Ipv4AddressHelper so use the usual simple 
# base IP. Leave mask and netip default
def get_nodeid_ip_map (baseIp, count):
  nodes = {}
  netIp = baseIp.rpartition ('.')[0] + '.'
  for i in range (1, count+1):
    nodes[i] = netIp + str (i)
  return nodes

def run_simulation (args, dir, logfile):
  #Command string
  command = './waf --run rapidnet-app-simulator --command-template="%%s --dir=%s --app=%s --nodes=%d --duration=%d --phy=%s --log-discovery=%d --log-app=%d --baseIp=%s --mm=%s --queryNum=%s %s --xbound=%d --ybound=%d --stream=%s --print-period=%s --print-reln=%s --maxJitter=%s" 2> %s'

  #Create directory
  print(('Creating dir %s' % dir))
  os.system ('mkdir %s' % dir)
  os.system ('mkdir %s' % os.path.join (dir, 'pcaps'))
  os.system ('mkdir %s' % os.path.join (dir, 'apptable'))
  print(('Log file: %s' % logfile))

  #Run command
  command = command % (dir, args['app'], args['nodes'], args['duration'], args['phy'], args['log-discovery'], args['log-app'], args['baseIp'], args['mm'], args['queryNum'], args['mob-args'], args['xbound'], args['ybound'], args['stream'], args['print-period'], args['print-reln'], args['maxJitter'], logfile)
  print(('Running command %s' % command))
  os.system (command)

# Plot graphs
def plot_graphs (args, dir, logfile, route_quality=False, bandwidth_color = True):
  NODESMAP_CLUSTER = './emulation/nodesmap_clust.py'
  NODESMAP_ORBIT = './emulation/nodesmap_orbit.py'
  APPTABLE_PERIOD = 5
  
  sys.path.append (PLOTTER_PATH)
  from sim_plot_bandwidth import plot_stats
  nodes = get_nodeid_ip_map (args['baseIp'], args['nodes'])
  #print ('Using nodes: %s' % nodes)
  plot_stats (dir, args['app'], nodes)

   # Generate apptable file for emulation
  print('Generating apptable files for cluster and orbit...')
  APPTABLE_PARSER = './rapidnet/apptable/apptable_parser'
  if args ['nodes'] <= 24:
    os.system ('%s %s %s %d %d > %s/apptable/apptable_cluster_%s' % (APPTABLE_PARSER, logfile, NODESMAP_CLUSTER, APPTABLE_PERIOD, args['duration'], dir, dir))
  os.system ('%s %s %s %d %d > %s/apptable/apptable_orbit_%s' % (APPTABLE_PARSER, logfile, NODESMAP_ORBIT, APPTABLE_PERIOD, args['duration'], dir, dir))
  print('Done!')

  # Generate apptable topogen file for plotting emulation graph
  print('Generating apptable_topo files for cluster and orbit...')
  APPTABLE_TOPOGEN = './rapidnet/apptable/apptable_topogen'
  if args ['nodes'] <= 24:
    os.system ('%s %s %s %d %d > %s/apptable/apptable_topo_clust_%s' % (APPTABLE_TOPOGEN, logfile, NODESMAP_CLUSTER, APPTABLE_PERIOD, args['duration'], dir, dir))
  os.system ('%s %s %s %d %d > %s/apptable/apptable_topo_orbit_%s' % (APPTABLE_TOPOGEN, logfile, NODESMAP_ORBIT, APPTABLE_PERIOD, args['duration'], dir, dir))
  print('Done!')

  if route_quality:
    # Compute packet losses
    os.system ('echo "eLSUs sent: "; cat %s | grep "Sending eLSU" | wc -l' % (logfile))
    os.system ('echo "eLSUs received: "; cat %s | grep "Received eLSU" | wc -l' % (logfile))
    # Generate route-quality graphs
    os.system ('./rapidnet/route-quality/sim_route_quality.py %s %d %d %d' % (dir, APPTABLE_PERIOD, args['duration'], args['nodes']))
    
  # Compute losses
  os.system ('./rapidnet/bandwidth/sim_plot_losses.py %s %d %d %s' % (dir, args['nodes'], args['duration'], args['app']))
  
  # Merge the logs to create events.log for visualizer
  os.system ('./rapidnet/plot/merge_logs.py %s %s %s' % (dir, route_quality, bandwidth_color))
  if route_quality:
    os.system ('cd %s ; mv events.log events-all.log' % dir)
    os.system ('cd %s ; cat events-all.log | grep -v "tLSU" > events.log' % dir)


# Simulates with given arguments.
def simulate (args, route_quality=False, bandwidth_color = True):

  if 'stream' not in list(args.keys ()):
    args['stream'] = 'clog'
  if 'print-period' not in list(args.keys ()):
    args['print-period'] = 0
  if 'xbound' not in list(args.keys ()):
    args['xbound'] = 2000
  if 'ybound' not in list(args.keys ()):
    args['ybound'] = 2000
  if 'baseIp' not in list(args.keys ()):
    args['baseIp'] = '192.168.0.0'
  if 'tag' not in list(args.keys ()):
    args['tag'] = ''
  if 'print-reln' not in list(args.keys ()):
    args['print-reln'] = 'tLink'
  if 'maxJitter' not in args:
    args['maxJitter'] = 500

  #Simulation variables
  if 'timestamp' in args:
    timestamp = args ['timestamp']
  else:
    timestamp = strftime ("%Y%m%d%H%M%S", gmtime ())
  dir = '%s_%s_%.2dnodes_%s_%s_%s' % (args ['app'], MODEL[args['mm']], args['nodes'], args['phy'], args['tag'], timestamp)
  logfile = '%s/output.log' % dir

  run_simulation (args, dir, logfile)
  plot_graphs (args, dir, logfile, route_quality, bandwidth_color)

  return dir

